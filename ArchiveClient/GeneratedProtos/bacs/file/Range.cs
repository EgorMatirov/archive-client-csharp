// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bacs/file/range.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bacs.File {

  /// <summary>Holder for reflection information generated from bacs/file/range.proto</summary>
  public static partial class RangeReflection {

    #region Descriptor
    /// <summary>File descriptor for bacs/file/range.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RangeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChViYWNzL2ZpbGUvcmFuZ2UucHJvdG8SCWJhY3MuZmlsZSJsCgVSYW5nZRIn",
            "CgZ3aGVuY2UYASABKA4yFy5iYWNzLmZpbGUuUmFuZ2UuV2hlbmNlEg4KBm9m",
            "ZnNldBgCIAEoAxIMCgRzaXplGAMgASgEIhwKBldoZW5jZRIJCgVCRUdJThAA",
            "EgcKA0VORBABQgZaBGZpbGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.File.Range), global::Bacs.File.Range.Parser, new[]{ "Whence", "Offset", "Size" }, null, new[]{ typeof(global::Bacs.File.Range.Types.Whence) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Range : pb::IMessage<Range> {
    private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Range> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.File.RangeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range(Range other) : this() {
      whence_ = other.whence_;
      offset_ = other.offset_;
      size_ = other.size_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range Clone() {
      return new Range(this);
    }

    /// <summary>Field number for the "whence" field.</summary>
    public const int WhenceFieldNumber = 1;
    private global::Bacs.File.Range.Types.Whence whence_ = 0;
    /// <summary>
    /// / Position from which offset will be calculated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.File.Range.Types.Whence Whence {
      get { return whence_; }
      set {
        whence_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private long offset_;
    /// <summary>
    /// !
    ///  Negative or positive offset
    ///  from position specified by whence field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private ulong size_;
    /// <summary>
    /// !
    ///  Size of chunk will be transmitted.
    ///
    ///  \note If EOF reached size of chunk may be smaller.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Range);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Range other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Whence != other.Whence) return false;
      if (Offset != other.Offset) return false;
      if (Size != other.Size) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Whence != 0) hash ^= Whence.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      if (Size != 0UL) hash ^= Size.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Whence != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Whence);
      }
      if (Offset != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Offset);
      }
      if (Size != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Size);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Whence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Whence);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (Size != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Size);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Range other) {
      if (other == null) {
        return;
      }
      if (other.Whence != 0) {
        Whence = other.Whence;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
      if (other.Size != 0UL) {
        Size = other.Size;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            whence_ = (global::Bacs.File.Range.Types.Whence) input.ReadEnum();
            break;
          }
          case 16: {
            Offset = input.ReadInt64();
            break;
          }
          case 24: {
            Size = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Range message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Whence {
        [pbr::OriginalName("BEGIN")] Begin = 0,
        [pbr::OriginalName("END")] End = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
