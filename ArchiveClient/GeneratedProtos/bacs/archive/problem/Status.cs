// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bacs/archive/problem/status.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bacs.Archive.Problem {

  /// <summary>Holder for reflection information generated from bacs/archive/problem/status.proto</summary>
  public static partial class StatusReflection {

    #region Descriptor
    /// <summary>File descriptor for bacs/archive/problem/status.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StatusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFiYWNzL2FyY2hpdmUvcHJvYmxlbS9zdGF0dXMucHJvdG8SFGJhY3MuYXJj",
            "aGl2ZS5wcm9ibGVtGiBiYWNzL2FyY2hpdmUvcHJvYmxlbS9lcnJvci5wcm90",
            "bxofYmFjcy9hcmNoaXZlL3Byb2JsZW0vZmxhZy5wcm90bxoaYmFjcy9wcm9i",
            "bGVtL3Byb2JsZW0ucHJvdG8iYAoGU3RhdHVzEiwKBWZsYWdzGAEgASgLMh0u",
            "YmFjcy5hcmNoaXZlLnByb2JsZW0uRmxhZ1NldBIoCghyZXZpc2lvbhgCIAEo",
            "CzIWLmJhY3MucHJvYmxlbS5SZXZpc2lvbiJ2CgxTdGF0dXNSZXN1bHQSLAoF",
            "ZXJyb3IYASABKAsyGy5iYWNzLmFyY2hpdmUucHJvYmxlbS5FcnJvckgAEi4K",
            "BnN0YXR1cxgCIAEoCzIcLmJhY3MuYXJjaGl2ZS5wcm9ibGVtLlN0YXR1c0gA",
            "QggKBnJlc3VsdCKYAQoJU3RhdHVzTWFwEjkKBWVudHJ5GAEgAygLMiouYmFj",
            "cy5hcmNoaXZlLnByb2JsZW0uU3RhdHVzTWFwLkVudHJ5RW50cnkaUAoKRW50",
            "cnlFbnRyeRILCgNrZXkYASABKAkSMQoFdmFsdWUYAiABKAsyIi5iYWNzLmFy",
            "Y2hpdmUucHJvYmxlbS5TdGF0dXNSZXN1bHQ6AjgBQglaB3Byb2JsZW1iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bacs.Archive.Problem.ErrorReflection.Descriptor, global::Bacs.Archive.Problem.FlagReflection.Descriptor, global::Bacs.Problem.ProblemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.Problem.Status), global::Bacs.Archive.Problem.Status.Parser, new[]{ "Flags", "Revision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.Problem.StatusResult), global::Bacs.Archive.Problem.StatusResult.Parser, new[]{ "Error", "Status" }, new[]{ "Result" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.Problem.StatusMap), global::Bacs.Archive.Problem.StatusMap.Parser, new[]{ "Entry" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.Problem.StatusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      Flags = other.flags_ != null ? other.Flags.Clone() : null;
      Revision = other.revision_ != null ? other.Revision.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 1;
    private global::Bacs.Archive.Problem.FlagSet flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.Problem.FlagSet Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 2;
    private global::Bacs.Problem.Revision revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Problem.Revision Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Flags, other.Flags)) return false;
      if (!object.Equals(Revision, other.Revision)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (flags_ != null) hash ^= Flags.GetHashCode();
      if (revision_ != null) hash ^= Revision.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (flags_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Flags);
      }
      if (revision_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Revision);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (flags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flags);
      }
      if (revision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Revision);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      if (other.flags_ != null) {
        if (flags_ == null) {
          flags_ = new global::Bacs.Archive.Problem.FlagSet();
        }
        Flags.MergeFrom(other.Flags);
      }
      if (other.revision_ != null) {
        if (revision_ == null) {
          revision_ = new global::Bacs.Problem.Revision();
        }
        Revision.MergeFrom(other.Revision);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (flags_ == null) {
              flags_ = new global::Bacs.Archive.Problem.FlagSet();
            }
            input.ReadMessage(flags_);
            break;
          }
          case 18: {
            if (revision_ == null) {
              revision_ = new global::Bacs.Problem.Revision();
            }
            input.ReadMessage(revision_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusResult : pb::IMessage<StatusResult> {
    private static readonly pb::MessageParser<StatusResult> _parser = new pb::MessageParser<StatusResult>(() => new StatusResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.Problem.StatusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResult(StatusResult other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case ResultOneofCase.Status:
          Status = other.Status.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResult Clone() {
      return new StatusResult(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.Problem.Error Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Bacs.Archive.Problem.Error) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Error;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.Problem.Status Status {
      get { return resultCase_ == ResultOneofCase.Status ? (global::Bacs.Archive.Problem.Status) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Status;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Error = 1,
      Status = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (ResultCase != other.ResultCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      if (resultCase_ == ResultOneofCase.Status) hash ^= Status.GetHashCode();
      hash ^= (int) resultCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (resultCase_ == ResultOneofCase.Status) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (resultCase_ == ResultOneofCase.Status) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusResult other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
        case ResultOneofCase.Status:
          Status = other.Status;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Bacs.Archive.Problem.Error subBuilder = new global::Bacs.Archive.Problem.Error();
            if (resultCase_ == ResultOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 18: {
            global::Bacs.Archive.Problem.Status subBuilder = new global::Bacs.Archive.Problem.Status();
            if (resultCase_ == ResultOneofCase.Status) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder);
            Status = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusMap : pb::IMessage<StatusMap> {
    private static readonly pb::MessageParser<StatusMap> _parser = new pb::MessageParser<StatusMap>(() => new StatusMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.Problem.StatusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMap(StatusMap other) : this() {
      entry_ = other.entry_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMap Clone() {
      return new StatusMap(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Bacs.Archive.Problem.StatusResult>.Codec _map_entry_codec
        = new pbc::MapField<string, global::Bacs.Archive.Problem.StatusResult>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Bacs.Archive.Problem.StatusResult.Parser), 10);
    private readonly pbc::MapField<string, global::Bacs.Archive.Problem.StatusResult> entry_ = new pbc::MapField<string, global::Bacs.Archive.Problem.StatusResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Bacs.Archive.Problem.StatusResult> Entry {
      get { return entry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Entry.Equals(other.Entry)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Entry.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entry_.WriteTo(output, _map_entry_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entry_.CalculateSize(_map_entry_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusMap other) {
      if (other == null) {
        return;
      }
      entry_.Add(other.entry_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entry_.AddEntriesFrom(input, _map_entry_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
