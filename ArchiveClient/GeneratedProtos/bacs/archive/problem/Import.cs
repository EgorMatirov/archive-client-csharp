// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bacs/archive/problem/import.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bacs.Archive.Problem {

  /// <summary>Holder for reflection information generated from bacs/archive/problem/import.proto</summary>
  public static partial class ImportReflection {

    #region Descriptor
    /// <summary>File descriptor for bacs/archive/problem/import.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFiYWNzL2FyY2hpdmUvcHJvYmxlbS9pbXBvcnQucHJvdG8SFGJhY3MuYXJj",
            "aGl2ZS5wcm9ibGVtGiBiYWNzL2FyY2hpdmUvcHJvYmxlbS9lcnJvci5wcm90",
            "bxoaYmFjcy9wcm9ibGVtL3Byb2JsZW0ucHJvdG8icAoMSW1wb3J0UmVzdWx0",
            "EiwKBWVycm9yGAEgASgLMhsuYmFjcy5hcmNoaXZlLnByb2JsZW0uRXJyb3JI",
            "ABIoCgdwcm9ibGVtGAIgASgLMhUuYmFjcy5wcm9ibGVtLlByb2JsZW1IAEII",
            "CgZyZXN1bHQimAEKCUltcG9ydE1hcBI5CgVlbnRyeRgBIAMoCzIqLmJhY3Mu",
            "YXJjaGl2ZS5wcm9ibGVtLkltcG9ydE1hcC5FbnRyeUVudHJ5GlAKCkVudHJ5",
            "RW50cnkSCwoDa2V5GAEgASgJEjEKBXZhbHVlGAIgASgLMiIuYmFjcy5hcmNo",
            "aXZlLnByb2JsZW0uSW1wb3J0UmVzdWx0OgI4AUIJWgdwcm9ibGVtYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bacs.Archive.Problem.ErrorReflection.Descriptor, global::Bacs.Problem.ProblemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.Problem.ImportResult), global::Bacs.Archive.Problem.ImportResult.Parser, new[]{ "Error", "Problem" }, new[]{ "Result" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.Problem.ImportMap), global::Bacs.Archive.Problem.ImportMap.Parser, new[]{ "Entry" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ImportResult : pb::IMessage<ImportResult> {
    private static readonly pb::MessageParser<ImportResult> _parser = new pb::MessageParser<ImportResult>(() => new ImportResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.Problem.ImportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportResult(ImportResult other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case ResultOneofCase.Problem:
          Problem = other.Problem.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportResult Clone() {
      return new ImportResult(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.Problem.Error Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Bacs.Archive.Problem.Error) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Error;
      }
    }

    /// <summary>Field number for the "problem" field.</summary>
    public const int ProblemFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Problem.Problem Problem {
      get { return resultCase_ == ResultOneofCase.Problem ? (global::Bacs.Problem.Problem) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Problem;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Error = 1,
      Problem = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Problem, other.Problem)) return false;
      if (ResultCase != other.ResultCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      if (resultCase_ == ResultOneofCase.Problem) hash ^= Problem.GetHashCode();
      hash ^= (int) resultCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (resultCase_ == ResultOneofCase.Problem) {
        output.WriteRawTag(18);
        output.WriteMessage(Problem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (resultCase_ == ResultOneofCase.Problem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Problem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportResult other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
        case ResultOneofCase.Problem:
          Problem = other.Problem;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Bacs.Archive.Problem.Error subBuilder = new global::Bacs.Archive.Problem.Error();
            if (resultCase_ == ResultOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 18: {
            global::Bacs.Problem.Problem subBuilder = new global::Bacs.Problem.Problem();
            if (resultCase_ == ResultOneofCase.Problem) {
              subBuilder.MergeFrom(Problem);
            }
            input.ReadMessage(subBuilder);
            Problem = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportMap : pb::IMessage<ImportMap> {
    private static readonly pb::MessageParser<ImportMap> _parser = new pb::MessageParser<ImportMap>(() => new ImportMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.Problem.ImportReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportMap(ImportMap other) : this() {
      entry_ = other.entry_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportMap Clone() {
      return new ImportMap(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Bacs.Archive.Problem.ImportResult>.Codec _map_entry_codec
        = new pbc::MapField<string, global::Bacs.Archive.Problem.ImportResult>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Bacs.Archive.Problem.ImportResult.Parser), 10);
    private readonly pbc::MapField<string, global::Bacs.Archive.Problem.ImportResult> entry_ = new pbc::MapField<string, global::Bacs.Archive.Problem.ImportResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Bacs.Archive.Problem.ImportResult> Entry {
      get { return entry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Entry.Equals(other.Entry)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Entry.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entry_.WriteTo(output, _map_entry_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entry_.CalculateSize(_map_entry_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportMap other) {
      if (other == null) {
        return;
      }
      entry_.Add(other.entry_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entry_.AddEntriesFrom(input, _map_entry_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
