// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bacs/archive/problem/flag.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bacs.Archive.Problem {

  /// <summary>Holder for reflection information generated from bacs/archive/problem/flag.proto</summary>
  public static partial class FlagReflection {

    #region Descriptor
    /// <summary>File descriptor for bacs/archive/problem/flag.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FlagReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9iYWNzL2FyY2hpdmUvcHJvYmxlbS9mbGFnLnByb3RvEhRiYWNzLmFyY2hp",
            "dmUucHJvYmxlbSIzCgdGbGFnU2V0EigKBGZsYWcYASADKAsyGi5iYWNzLmFy",
            "Y2hpdmUucHJvYmxlbS5GbGFnIqoBCgRGbGFnEjcKCHJlc2VydmVkGAEgASgO",
            "MiMuYmFjcy5hcmNoaXZlLnByb2JsZW0uRmxhZy5SZXNlcnZlZEgAEhAKBmN1",
            "c3RvbRgCIAEoCUgAIk8KCFJlc2VydmVkEggKBE5PTkUQABIKCgZJR05PUkUQ",
            "ARIKCgZMT0NLRUQQAhINCglSRUFEX09OTFkQAxISCg5QRU5ESU5HX0lNUE9S",
            "VBAEQgYKBGZsYWdCCVoHcHJvYmxlbWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.Problem.FlagSet), global::Bacs.Archive.Problem.FlagSet.Parser, new[]{ "Flag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.Problem.Flag), global::Bacs.Archive.Problem.Flag.Parser, new[]{ "Reserved", "Custom" }, new[]{ "Flag" }, new[]{ typeof(global::Bacs.Archive.Problem.Flag.Types.Reserved) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FlagSet : pb::IMessage<FlagSet> {
    private static readonly pb::MessageParser<FlagSet> _parser = new pb::MessageParser<FlagSet>(() => new FlagSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlagSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.Problem.FlagReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlagSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlagSet(FlagSet other) : this() {
      flag_ = other.flag_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlagSet Clone() {
      return new FlagSet(this);
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bacs.Archive.Problem.Flag> _repeated_flag_codec
        = pb::FieldCodec.ForMessage(10, global::Bacs.Archive.Problem.Flag.Parser);
    private readonly pbc::RepeatedField<global::Bacs.Archive.Problem.Flag> flag_ = new pbc::RepeatedField<global::Bacs.Archive.Problem.Flag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bacs.Archive.Problem.Flag> Flag {
      get { return flag_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlagSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlagSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!flag_.Equals(other.flag_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= flag_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      flag_.WriteTo(output, _repeated_flag_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += flag_.CalculateSize(_repeated_flag_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlagSet other) {
      if (other == null) {
        return;
      }
      flag_.Add(other.flag_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            flag_.AddEntriesFrom(input, _repeated_flag_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  It is OK to specify reserved flag as custom.
  /// </summary>
  public sealed partial class Flag : pb::IMessage<Flag> {
    private static readonly pb::MessageParser<Flag> _parser = new pb::MessageParser<Flag>(() => new Flag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Flag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.Problem.FlagReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flag(Flag other) : this() {
      switch (other.FlagCase) {
        case FlagOneofCase.Reserved:
          Reserved = other.Reserved;
          break;
        case FlagOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flag Clone() {
      return new Flag(this);
    }

    /// <summary>Field number for the "reserved" field.</summary>
    public const int ReservedFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.Problem.Flag.Types.Reserved Reserved {
      get { return flagCase_ == FlagOneofCase.Reserved ? (global::Bacs.Archive.Problem.Flag.Types.Reserved) flag_ : 0; }
      set {
        flag_ = value;
        flagCase_ = FlagOneofCase.Reserved;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Custom {
      get { return flagCase_ == FlagOneofCase.Custom ? (string) flag_ : ""; }
      set {
        flag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        flagCase_ = FlagOneofCase.Custom;
      }
    }

    private object flag_;
    /// <summary>Enum of possible cases for the "flag" oneof.</summary>
    public enum FlagOneofCase {
      None = 0,
      Reserved = 1,
      Custom = 2,
    }
    private FlagOneofCase flagCase_ = FlagOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlagOneofCase FlagCase {
      get { return flagCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlag() {
      flagCase_ = FlagOneofCase.None;
      flag_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Flag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Flag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reserved != other.Reserved) return false;
      if (Custom != other.Custom) return false;
      if (FlagCase != other.FlagCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (flagCase_ == FlagOneofCase.Reserved) hash ^= Reserved.GetHashCode();
      if (flagCase_ == FlagOneofCase.Custom) hash ^= Custom.GetHashCode();
      hash ^= (int) flagCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (flagCase_ == FlagOneofCase.Reserved) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reserved);
      }
      if (flagCase_ == FlagOneofCase.Custom) {
        output.WriteRawTag(18);
        output.WriteString(Custom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (flagCase_ == FlagOneofCase.Reserved) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reserved);
      }
      if (flagCase_ == FlagOneofCase.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Custom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Flag other) {
      if (other == null) {
        return;
      }
      switch (other.FlagCase) {
        case FlagOneofCase.Reserved:
          Reserved = other.Reserved;
          break;
        case FlagOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag_ = input.ReadEnum();
            flagCase_ = FlagOneofCase.Reserved;
            break;
          }
          case 18: {
            Custom = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Flag message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Reserved {
        /// <summary>
        ///  Reserved default value, should not be used.
        /// </summary>
        [pbr::OriginalName("NONE")] None = 0,
        /// <summary>
        ///  This flag will exclude problem from non-flags and non-status functions.
        ///  It is set automatically if problem can't be imported.
        /// </summary>
        [pbr::OriginalName("IGNORE")] Ignore = 1,
        /// <summary>
        ///  Exclude problem from operations that
        ///  can alter problem's archive or problem id, i.e. user
        ///  will not be able to re-upload problem, rename or remove it.
        ///  But it is still possible to change problem's flags and import it.
        /// </summary>
        [pbr::OriginalName("LOCKED")] Locked = 2,
        /// <summary>
        ///  Harder version of LOCKED.
        ///  It does not allow to edit flags.
        ///  Only administrator can remove this flag manually.
        /// </summary>
        [pbr::OriginalName("READ_ONLY")] ReadOnly = 3,
        /// <summary>
        ///  Import is planned and will be done soon.
        /// </summary>
        [pbr::OriginalName("PENDING_IMPORT")] PendingImport = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
