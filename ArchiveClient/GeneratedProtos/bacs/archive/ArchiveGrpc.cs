// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bacs/archive/archive.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Bacs.Archive {
  public static class Archive
  {
    static readonly string __ServiceName = "bacs.archive.Archive";

    static readonly Marshaller<global::Bacs.Archive.Chunk> __Marshaller_Chunk = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bacs.Archive.Chunk.Parser.ParseFrom);
    static readonly Marshaller<global::Bacs.Archive.Problem.StatusMap> __Marshaller_StatusMap = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bacs.Archive.Problem.StatusMap.Parser.ParseFrom);
    static readonly Marshaller<global::Bacs.Archive.DownloadRequest> __Marshaller_DownloadRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bacs.Archive.DownloadRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Bacs.Archive.RenameRequest> __Marshaller_RenameRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bacs.Archive.RenameRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Bacs.Archive.Problem.StatusResult> __Marshaller_StatusResult = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bacs.Archive.Problem.StatusResult.Parser.ParseFrom);
    static readonly Marshaller<global::Bacs.Archive.Problem.IdSet> __Marshaller_IdSet = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bacs.Archive.Problem.IdSet.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Bacs.Archive.Problem.ImportMap> __Marshaller_ImportMap = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bacs.Archive.Problem.ImportMap.Parser.ParseFrom);
    static readonly Marshaller<global::Bacs.Archive.ChangeFlagsRequest> __Marshaller_ChangeFlagsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bacs.Archive.ChangeFlagsRequest.Parser.ParseFrom);

    static readonly Method<global::Bacs.Archive.Chunk, global::Bacs.Archive.Problem.StatusMap> __Method_Upload = new Method<global::Bacs.Archive.Chunk, global::Bacs.Archive.Problem.StatusMap>(
        MethodType.ClientStreaming,
        __ServiceName,
        "Upload",
        __Marshaller_Chunk,
        __Marshaller_StatusMap);

    static readonly Method<global::Bacs.Archive.DownloadRequest, global::Bacs.Archive.Chunk> __Method_Download = new Method<global::Bacs.Archive.DownloadRequest, global::Bacs.Archive.Chunk>(
        MethodType.ServerStreaming,
        __ServiceName,
        "Download",
        __Marshaller_DownloadRequest,
        __Marshaller_Chunk);

    static readonly Method<global::Bacs.Archive.RenameRequest, global::Bacs.Archive.Problem.StatusResult> __Method_Rename = new Method<global::Bacs.Archive.RenameRequest, global::Bacs.Archive.Problem.StatusResult>(
        MethodType.Unary,
        __ServiceName,
        "Rename",
        __Marshaller_RenameRequest,
        __Marshaller_StatusResult);

    static readonly Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.IdSet> __Method_Existing = new Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.IdSet>(
        MethodType.Unary,
        __ServiceName,
        "Existing",
        __Marshaller_IdSet,
        __Marshaller_IdSet);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Bacs.Archive.Problem.IdSet> __Method_ExistingAll = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Bacs.Archive.Problem.IdSet>(
        MethodType.Unary,
        __ServiceName,
        "ExistingAll",
        __Marshaller_Empty,
        __Marshaller_IdSet);

    static readonly Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.StatusMap> __Method_Status = new Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.StatusMap>(
        MethodType.Unary,
        __ServiceName,
        "Status",
        __Marshaller_IdSet,
        __Marshaller_StatusMap);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Bacs.Archive.Problem.StatusMap> __Method_StatusAll = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Bacs.Archive.Problem.StatusMap>(
        MethodType.Unary,
        __ServiceName,
        "StatusAll",
        __Marshaller_Empty,
        __Marshaller_StatusMap);

    static readonly Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.ImportMap> __Method_ImportResult = new Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.ImportMap>(
        MethodType.Unary,
        __ServiceName,
        "ImportResult",
        __Marshaller_IdSet,
        __Marshaller_ImportMap);

    static readonly Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.StatusMap> __Method_Import = new Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.StatusMap>(
        MethodType.Unary,
        __ServiceName,
        "Import",
        __Marshaller_IdSet,
        __Marshaller_StatusMap);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Bacs.Archive.Problem.StatusMap> __Method_ImportAll = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Bacs.Archive.Problem.StatusMap>(
        MethodType.Unary,
        __ServiceName,
        "ImportAll",
        __Marshaller_Empty,
        __Marshaller_StatusMap);

    static readonly Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.IdSet> __Method_WithFlag = new Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.IdSet>(
        MethodType.Unary,
        __ServiceName,
        "WithFlag",
        __Marshaller_IdSet,
        __Marshaller_IdSet);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Bacs.Archive.Problem.IdSet> __Method_WithFlagAll = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Bacs.Archive.Problem.IdSet>(
        MethodType.Unary,
        __ServiceName,
        "WithFlagAll",
        __Marshaller_Empty,
        __Marshaller_IdSet);

    static readonly Method<global::Bacs.Archive.ChangeFlagsRequest, global::Bacs.Archive.Problem.StatusMap> __Method_SetFlags = new Method<global::Bacs.Archive.ChangeFlagsRequest, global::Bacs.Archive.Problem.StatusMap>(
        MethodType.Unary,
        __ServiceName,
        "SetFlags",
        __Marshaller_ChangeFlagsRequest,
        __Marshaller_StatusMap);

    static readonly Method<global::Bacs.Archive.ChangeFlagsRequest, global::Bacs.Archive.Problem.StatusMap> __Method_UnsetFlags = new Method<global::Bacs.Archive.ChangeFlagsRequest, global::Bacs.Archive.Problem.StatusMap>(
        MethodType.Unary,
        __ServiceName,
        "UnsetFlags",
        __Marshaller_ChangeFlagsRequest,
        __Marshaller_StatusMap);

    static readonly Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.StatusMap> __Method_ClearFlags = new Method<global::Bacs.Archive.Problem.IdSet, global::Bacs.Archive.Problem.StatusMap>(
        MethodType.Unary,
        __ServiceName,
        "ClearFlags",
        __Marshaller_IdSet,
        __Marshaller_StatusMap);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bacs.Archive.ArchiveReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Archive</summary>
    public abstract class ArchiveBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.StatusMap> Upload(IAsyncStreamReader<global::Bacs.Archive.Chunk> requestStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Download(global::Bacs.Archive.DownloadRequest request, IServerStreamWriter<global::Bacs.Archive.Chunk> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.StatusResult> Rename(global::Bacs.Archive.RenameRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.IdSet> Existing(global::Bacs.Archive.Problem.IdSet request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.IdSet> ExistingAll(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.StatusMap> Status(global::Bacs.Archive.Problem.IdSet request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.StatusMap> StatusAll(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.ImportMap> ImportResult(global::Bacs.Archive.Problem.IdSet request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.StatusMap> Import(global::Bacs.Archive.Problem.IdSet request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.StatusMap> ImportAll(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Flag API is not stable. Not intended for public usage.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.IdSet> WithFlag(global::Bacs.Archive.Problem.IdSet request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.IdSet> WithFlagAll(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.StatusMap> SetFlags(global::Bacs.Archive.ChangeFlagsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.StatusMap> UnsetFlags(global::Bacs.Archive.ChangeFlagsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bacs.Archive.Problem.StatusMap> ClearFlags(global::Bacs.Archive.Problem.IdSet request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Archive</summary>
    public class ArchiveClient : ClientBase<ArchiveClient>
    {
      /// <summary>Creates a new client for Archive</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ArchiveClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Archive that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ArchiveClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ArchiveClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ArchiveClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual AsyncClientStreamingCall<global::Bacs.Archive.Chunk, global::Bacs.Archive.Problem.StatusMap> Upload(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Upload(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncClientStreamingCall<global::Bacs.Archive.Chunk, global::Bacs.Archive.Problem.StatusMap> Upload(CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_Upload, null, options);
      }
      public virtual AsyncServerStreamingCall<global::Bacs.Archive.Chunk> Download(global::Bacs.Archive.DownloadRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Download(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::Bacs.Archive.Chunk> Download(global::Bacs.Archive.DownloadRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Download, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.StatusResult Rename(global::Bacs.Archive.RenameRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Rename(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.StatusResult Rename(global::Bacs.Archive.RenameRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Rename, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusResult> RenameAsync(global::Bacs.Archive.RenameRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusResult> RenameAsync(global::Bacs.Archive.RenameRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Rename, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.IdSet Existing(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Existing(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.IdSet Existing(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Existing, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.IdSet> ExistingAsync(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExistingAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.IdSet> ExistingAsync(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Existing, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.IdSet ExistingAll(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExistingAll(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.IdSet ExistingAll(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExistingAll, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.IdSet> ExistingAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExistingAllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.IdSet> ExistingAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExistingAll, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.StatusMap Status(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Status(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.StatusMap Status(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Status, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> StatusAsync(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StatusAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> StatusAsync(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Status, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.StatusMap StatusAll(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StatusAll(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.StatusMap StatusAll(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StatusAll, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> StatusAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StatusAllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> StatusAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StatusAll, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.ImportMap ImportResult(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ImportResult(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.ImportMap ImportResult(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportResult, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.ImportMap> ImportResultAsync(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ImportResultAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.ImportMap> ImportResultAsync(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportResult, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.StatusMap Import(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Import(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.StatusMap Import(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Import, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> ImportAsync(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ImportAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> ImportAsync(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Import, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.StatusMap ImportAll(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ImportAll(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.StatusMap ImportAll(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportAll, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> ImportAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ImportAllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> ImportAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportAll, null, options, request);
      }
      /// <summary>
      ///  Flag API is not stable. Not intended for public usage.
      /// </summary>
      public virtual global::Bacs.Archive.Problem.IdSet WithFlag(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WithFlag(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Flag API is not stable. Not intended for public usage.
      /// </summary>
      public virtual global::Bacs.Archive.Problem.IdSet WithFlag(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithFlag, null, options, request);
      }
      /// <summary>
      ///  Flag API is not stable. Not intended for public usage.
      /// </summary>
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.IdSet> WithFlagAsync(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WithFlagAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Flag API is not stable. Not intended for public usage.
      /// </summary>
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.IdSet> WithFlagAsync(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithFlag, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.IdSet WithFlagAll(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WithFlagAll(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.IdSet WithFlagAll(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithFlagAll, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.IdSet> WithFlagAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WithFlagAllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.IdSet> WithFlagAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithFlagAll, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.StatusMap SetFlags(global::Bacs.Archive.ChangeFlagsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetFlags(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.StatusMap SetFlags(global::Bacs.Archive.ChangeFlagsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetFlags, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> SetFlagsAsync(global::Bacs.Archive.ChangeFlagsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetFlagsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> SetFlagsAsync(global::Bacs.Archive.ChangeFlagsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetFlags, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.StatusMap UnsetFlags(global::Bacs.Archive.ChangeFlagsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnsetFlags(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.StatusMap UnsetFlags(global::Bacs.Archive.ChangeFlagsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnsetFlags, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> UnsetFlagsAsync(global::Bacs.Archive.ChangeFlagsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnsetFlagsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> UnsetFlagsAsync(global::Bacs.Archive.ChangeFlagsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnsetFlags, null, options, request);
      }
      public virtual global::Bacs.Archive.Problem.StatusMap ClearFlags(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearFlags(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bacs.Archive.Problem.StatusMap ClearFlags(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearFlags, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> ClearFlagsAsync(global::Bacs.Archive.Problem.IdSet request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearFlagsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Bacs.Archive.Problem.StatusMap> ClearFlagsAsync(global::Bacs.Archive.Problem.IdSet request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearFlags, null, options, request);
      }
      protected override ArchiveClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ArchiveClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ArchiveBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Upload, serviceImpl.Upload)
          .AddMethod(__Method_Download, serviceImpl.Download)
          .AddMethod(__Method_Rename, serviceImpl.Rename)
          .AddMethod(__Method_Existing, serviceImpl.Existing)
          .AddMethod(__Method_ExistingAll, serviceImpl.ExistingAll)
          .AddMethod(__Method_Status, serviceImpl.Status)
          .AddMethod(__Method_StatusAll, serviceImpl.StatusAll)
          .AddMethod(__Method_ImportResult, serviceImpl.ImportResult)
          .AddMethod(__Method_Import, serviceImpl.Import)
          .AddMethod(__Method_ImportAll, serviceImpl.ImportAll)
          .AddMethod(__Method_WithFlag, serviceImpl.WithFlag)
          .AddMethod(__Method_WithFlagAll, serviceImpl.WithFlagAll)
          .AddMethod(__Method_SetFlags, serviceImpl.SetFlags)
          .AddMethod(__Method_UnsetFlags, serviceImpl.UnsetFlags)
          .AddMethod(__Method_ClearFlags, serviceImpl.ClearFlags).Build();
    }

  }
}
#endregion
