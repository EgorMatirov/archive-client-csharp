// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bacs/archive/archive.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bacs.Archive {

  /// <summary>Holder for reflection information generated from bacs/archive/archive.proto</summary>
  public static partial class ArchiveReflection {

    #region Descriptor
    /// <summary>File descriptor for bacs/archive/archive.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArchiveReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpiYWNzL2FyY2hpdmUvYXJjaGl2ZS5wcm90bxIMYmFjcy5hcmNoaXZlGh9i",
            "YWNzL2FyY2hpdmUvcHJvYmxlbS9mbGFnLnByb3RvGh1iYWNzL2FyY2hpdmUv",
            "cHJvYmxlbS9pZC5wcm90bxohYmFjcy9hcmNoaXZlL3Byb2JsZW0vaW1wb3J0",
            "LnByb3RvGiFiYWNzL2FyY2hpdmUvcHJvYmxlbS9zdGF0dXMucHJvdG8aG2Jh",
            "Y3MvdXRpbGl0eS9hcmNoaXZlci5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL2Vt",
            "cHR5LnByb3RvIj0KBUNodW5rEiYKBmZvcm1hdBgBIAEoCzIWLmJhY3MudXRp",
            "bGl0eS5BcmNoaXZlchIMCgRkYXRhGAIgASgMImMKD0Rvd25sb2FkUmVxdWVz",
            "dBIoCgNpZHMYASABKAsyGy5iYWNzLmFyY2hpdmUucHJvYmxlbS5JZFNldBIm",
            "CgZmb3JtYXQYAiABKAsyFi5iYWNzLnV0aWxpdHkuQXJjaGl2ZXIiKQoNUmVu",
            "YW1lUmVxdWVzdBIMCgRmcm9tGAEgASgJEgoKAnRvGAIgASgJImsKEkNoYW5n",
            "ZUZsYWdzUmVxdWVzdBIoCgNpZHMYASABKAsyGy5iYWNzLmFyY2hpdmUucHJv",
            "YmxlbS5JZFNldBIrCgRmbGFnGAIgASgLMh0uYmFjcy5hcmNoaXZlLnByb2Js",
            "ZW0uRmxhZ1NldCL9AQoUQXJjaGl2ZVNlcnZpY2VDb25maWcSGAoQdXBsb2Fk",
            "X2RpcmVjdG9yeRgBIAEoCRJDCgtwZXJtaXNzaW9ucxgCIAEoCzIuLmJhY3Mu",
            "YXJjaGl2ZS5BcmNoaXZlU2VydmljZUNvbmZpZy5QZXJtaXNzaW9ucxqFAQoL",
            "UGVybWlzc2lvbnMSEQoJYWxsb3dfYW55GAEgASgIEkkKDGFsbG93ZWRfdXNl",
            "chgCIAMoCzIzLmJhY3MuYXJjaGl2ZS5BcmNoaXZlU2VydmljZUNvbmZpZy5Q",
            "ZXJtaXNzaW9ucy5Vc2VyGhgKBFVzZXISEAoIaWRlbnRpdHkYASADKAkiogMK",
            "E0FyY2hpdmVTZXJ2ZXJDb25maWcSDgoGbGlzdGVuGAEgASgJEjMKB3NlcnZp",
            "Y2UYAiABKAsyIi5iYWNzLmFyY2hpdmUuQXJjaGl2ZVNlcnZpY2VDb25maWcS",
            "SwoPc3NsX2NyZWRlbnRpYWxzGAMgASgLMjAuYmFjcy5hcmNoaXZlLkFyY2hp",
            "dmVTZXJ2ZXJDb25maWcuU3NsQ3JlZGVudGlhbHNIABrpAQoOU3NsQ3JlZGVu",
            "dGlhbHMSGwoTcGVtX3Jvb3RfY2VydHNfcGF0aBgBIAEoCRJaChFwZW1fa2V5",
            "X2NlcnRfcGFpchgCIAMoCzI/LmJhY3MuYXJjaGl2ZS5BcmNoaXZlU2VydmVy",
            "Q29uZmlnLlNzbENyZWRlbnRpYWxzLlBlbUtleUNlcnRQYWlyEhkKEWZvcmNl",
            "X2NsaWVudF9hdXRoGAMgASgIGkMKDlBlbUtleUNlcnRQYWlyEhgKEHByaXZh",
            "dGVfa2V5X3BhdGgYASABKAkSFwoPY2VydF9jaGFpbl9wYXRoGAIgASgJQg0K",
            "C2NyZWRlbnRpYWxzMsIICgdBcmNoaXZlEkAKBlVwbG9hZBITLmJhY3MuYXJj",
            "aGl2ZS5DaHVuaxofLmJhY3MuYXJjaGl2ZS5wcm9ibGVtLlN0YXR1c01hcCgB",
            "EkAKCERvd25sb2FkEh0uYmFjcy5hcmNoaXZlLkRvd25sb2FkUmVxdWVzdBoT",
            "LmJhY3MuYXJjaGl2ZS5DaHVuazABEkkKBlJlbmFtZRIbLmJhY3MuYXJjaGl2",
            "ZS5SZW5hbWVSZXF1ZXN0GiIuYmFjcy5hcmNoaXZlLnByb2JsZW0uU3RhdHVz",
            "UmVzdWx0EkQKCEV4aXN0aW5nEhsuYmFjcy5hcmNoaXZlLnByb2JsZW0uSWRT",
            "ZXQaGy5iYWNzLmFyY2hpdmUucHJvYmxlbS5JZFNldBJCCgtFeGlzdGluZ0Fs",
            "bBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRobLmJhY3MuYXJjaGl2ZS5wcm9i",
            "bGVtLklkU2V0EkYKBlN0YXR1cxIbLmJhY3MuYXJjaGl2ZS5wcm9ibGVtLklk",
            "U2V0Gh8uYmFjcy5hcmNoaXZlLnByb2JsZW0uU3RhdHVzTWFwEkQKCVN0YXR1",
            "c0FsbBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRofLmJhY3MuYXJjaGl2ZS5w",
            "cm9ibGVtLlN0YXR1c01hcBJMCgxJbXBvcnRSZXN1bHQSGy5iYWNzLmFyY2hp",
            "dmUucHJvYmxlbS5JZFNldBofLmJhY3MuYXJjaGl2ZS5wcm9ibGVtLkltcG9y",
            "dE1hcBJGCgZJbXBvcnQSGy5iYWNzLmFyY2hpdmUucHJvYmxlbS5JZFNldBof",
            "LmJhY3MuYXJjaGl2ZS5wcm9ibGVtLlN0YXR1c01hcBJECglJbXBvcnRBbGwS",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaHy5iYWNzLmFyY2hpdmUucHJvYmxl",
            "bS5TdGF0dXNNYXASRAoIV2l0aEZsYWcSGy5iYWNzLmFyY2hpdmUucHJvYmxl",
            "bS5JZFNldBobLmJhY3MuYXJjaGl2ZS5wcm9ibGVtLklkU2V0EkIKC1dpdGhG",
            "bGFnQWxsEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuYmFjcy5hcmNoaXZl",
            "LnByb2JsZW0uSWRTZXQSTQoIU2V0RmxhZ3MSIC5iYWNzLmFyY2hpdmUuQ2hh",
            "bmdlRmxhZ3NSZXF1ZXN0Gh8uYmFjcy5hcmNoaXZlLnByb2JsZW0uU3RhdHVz",
            "TWFwEk8KClVuc2V0RmxhZ3MSIC5iYWNzLmFyY2hpdmUuQ2hhbmdlRmxhZ3NS",
            "ZXF1ZXN0Gh8uYmFjcy5hcmNoaXZlLnByb2JsZW0uU3RhdHVzTWFwEkoKCkNs",
            "ZWFyRmxhZ3MSGy5iYWNzLmFyY2hpdmUucHJvYmxlbS5JZFNldBofLmJhY3Mu",
            "YXJjaGl2ZS5wcm9ibGVtLlN0YXR1c01hcEIJWgdhcmNoaXZlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bacs.Archive.Problem.FlagReflection.Descriptor, global::Bacs.Archive.Problem.IdReflection.Descriptor, global::Bacs.Archive.Problem.ImportReflection.Descriptor, global::Bacs.Archive.Problem.StatusReflection.Descriptor, global::Bacs.Utility.ArchiverReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.Chunk), global::Bacs.Archive.Chunk.Parser, new[]{ "Format", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.DownloadRequest), global::Bacs.Archive.DownloadRequest.Parser, new[]{ "Ids", "Format" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.RenameRequest), global::Bacs.Archive.RenameRequest.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.ChangeFlagsRequest), global::Bacs.Archive.ChangeFlagsRequest.Parser, new[]{ "Ids", "Flag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.ArchiveServiceConfig), global::Bacs.Archive.ArchiveServiceConfig.Parser, new[]{ "UploadDirectory", "Permissions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions), global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions.Parser, new[]{ "AllowAny", "AllowedUser" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions.Types.User), global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions.Types.User.Parser, new[]{ "Identity" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.ArchiveServerConfig), global::Bacs.Archive.ArchiveServerConfig.Parser, new[]{ "Listen", "Service", "SslCredentials" }, new[]{ "Credentials" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials), global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials.Parser, new[]{ "PemRootCertsPath", "PemKeyCertPair", "ForceClientAuth" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials.Types.PemKeyCertPair), global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials.Types.PemKeyCertPair.Parser, new[]{ "PrivateKeyPath", "CertChainPath" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Chunk : pb::IMessage<Chunk> {
    private static readonly pb::MessageParser<Chunk> _parser = new pb::MessageParser<Chunk>(() => new Chunk());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.ArchiveReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chunk(Chunk other) : this() {
      Format = other.format_ != null ? other.Format.Clone() : null;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chunk Clone() {
      return new Chunk(this);
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 1;
    private global::Bacs.Utility.Archiver format_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Utility.Archiver Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Format, other.Format)) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (format_ != null) hash ^= Format.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (format_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Format);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (format_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Format);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chunk other) {
      if (other == null) {
        return;
      }
      if (other.format_ != null) {
        if (format_ == null) {
          format_ = new global::Bacs.Utility.Archiver();
        }
        Format.MergeFrom(other.Format);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (format_ == null) {
              format_ = new global::Bacs.Utility.Archiver();
            }
            input.ReadMessage(format_);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DownloadRequest : pb::IMessage<DownloadRequest> {
    private static readonly pb::MessageParser<DownloadRequest> _parser = new pb::MessageParser<DownloadRequest>(() => new DownloadRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DownloadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.ArchiveReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadRequest(DownloadRequest other) : this() {
      Ids = other.ids_ != null ? other.Ids.Clone() : null;
      Format = other.format_ != null ? other.Format.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadRequest Clone() {
      return new DownloadRequest(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private global::Bacs.Archive.Problem.IdSet ids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.Problem.IdSet Ids {
      get { return ids_; }
      set {
        ids_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private global::Bacs.Utility.Archiver format_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Utility.Archiver Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DownloadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DownloadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ids, other.Ids)) return false;
      if (!object.Equals(Format, other.Format)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ids_ != null) hash ^= Ids.GetHashCode();
      if (format_ != null) hash ^= Format.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ids_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ids);
      }
      if (format_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Format);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ids_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ids);
      }
      if (format_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Format);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DownloadRequest other) {
      if (other == null) {
        return;
      }
      if (other.ids_ != null) {
        if (ids_ == null) {
          ids_ = new global::Bacs.Archive.Problem.IdSet();
        }
        Ids.MergeFrom(other.Ids);
      }
      if (other.format_ != null) {
        if (format_ == null) {
          format_ = new global::Bacs.Utility.Archiver();
        }
        Format.MergeFrom(other.Format);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ids_ == null) {
              ids_ = new global::Bacs.Archive.Problem.IdSet();
            }
            input.ReadMessage(ids_);
            break;
          }
          case 18: {
            if (format_ == null) {
              format_ = new global::Bacs.Utility.Archiver();
            }
            input.ReadMessage(format_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RenameRequest : pb::IMessage<RenameRequest> {
    private static readonly pb::MessageParser<RenameRequest> _parser = new pb::MessageParser<RenameRequest>(() => new RenameRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.ArchiveReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameRequest(RenameRequest other) : this() {
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameRequest Clone() {
      return new RenameRequest(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameRequest other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeFlagsRequest : pb::IMessage<ChangeFlagsRequest> {
    private static readonly pb::MessageParser<ChangeFlagsRequest> _parser = new pb::MessageParser<ChangeFlagsRequest>(() => new ChangeFlagsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeFlagsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.ArchiveReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeFlagsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeFlagsRequest(ChangeFlagsRequest other) : this() {
      Ids = other.ids_ != null ? other.Ids.Clone() : null;
      Flag = other.flag_ != null ? other.Flag.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeFlagsRequest Clone() {
      return new ChangeFlagsRequest(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private global::Bacs.Archive.Problem.IdSet ids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.Problem.IdSet Ids {
      get { return ids_; }
      set {
        ids_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private global::Bacs.Archive.Problem.FlagSet flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.Problem.FlagSet Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeFlagsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeFlagsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ids, other.Ids)) return false;
      if (!object.Equals(Flag, other.Flag)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ids_ != null) hash ^= Ids.GetHashCode();
      if (flag_ != null) hash ^= Flag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ids_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ids);
      }
      if (flag_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ids_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ids);
      }
      if (flag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeFlagsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ids_ != null) {
        if (ids_ == null) {
          ids_ = new global::Bacs.Archive.Problem.IdSet();
        }
        Ids.MergeFrom(other.Ids);
      }
      if (other.flag_ != null) {
        if (flag_ == null) {
          flag_ = new global::Bacs.Archive.Problem.FlagSet();
        }
        Flag.MergeFrom(other.Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ids_ == null) {
              ids_ = new global::Bacs.Archive.Problem.IdSet();
            }
            input.ReadMessage(ids_);
            break;
          }
          case 18: {
            if (flag_ == null) {
              flag_ = new global::Bacs.Archive.Problem.FlagSet();
            }
            input.ReadMessage(flag_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Configuration
  /// </summary>
  public sealed partial class ArchiveServiceConfig : pb::IMessage<ArchiveServiceConfig> {
    private static readonly pb::MessageParser<ArchiveServiceConfig> _parser = new pb::MessageParser<ArchiveServiceConfig>(() => new ArchiveServiceConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArchiveServiceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.ArchiveReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchiveServiceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchiveServiceConfig(ArchiveServiceConfig other) : this() {
      uploadDirectory_ = other.uploadDirectory_;
      Permissions = other.permissions_ != null ? other.Permissions.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchiveServiceConfig Clone() {
      return new ArchiveServiceConfig(this);
    }

    /// <summary>Field number for the "upload_directory" field.</summary>
    public const int UploadDirectoryFieldNumber = 1;
    private string uploadDirectory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UploadDirectory {
      get { return uploadDirectory_; }
      set {
        uploadDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 2;
    private global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions permissions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions Permissions {
      get { return permissions_; }
      set {
        permissions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArchiveServiceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArchiveServiceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UploadDirectory != other.UploadDirectory) return false;
      if (!object.Equals(Permissions, other.Permissions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UploadDirectory.Length != 0) hash ^= UploadDirectory.GetHashCode();
      if (permissions_ != null) hash ^= Permissions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UploadDirectory.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UploadDirectory);
      }
      if (permissions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Permissions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UploadDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UploadDirectory);
      }
      if (permissions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Permissions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArchiveServiceConfig other) {
      if (other == null) {
        return;
      }
      if (other.UploadDirectory.Length != 0) {
        UploadDirectory = other.UploadDirectory;
      }
      if (other.permissions_ != null) {
        if (permissions_ == null) {
          permissions_ = new global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions();
        }
        Permissions.MergeFrom(other.Permissions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UploadDirectory = input.ReadString();
            break;
          }
          case 18: {
            if (permissions_ == null) {
              permissions_ = new global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions();
            }
            input.ReadMessage(permissions_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArchiveServiceConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Permissions : pb::IMessage<Permissions> {
        private static readonly pb::MessageParser<Permissions> _parser = new pb::MessageParser<Permissions>(() => new Permissions());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Permissions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bacs.Archive.ArchiveServiceConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Permissions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Permissions(Permissions other) : this() {
          allowAny_ = other.allowAny_;
          allowedUser_ = other.allowedUser_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Permissions Clone() {
          return new Permissions(this);
        }

        /// <summary>Field number for the "allow_any" field.</summary>
        public const int AllowAnyFieldNumber = 1;
        private bool allowAny_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllowAny {
          get { return allowAny_; }
          set {
            allowAny_ = value;
          }
        }

        /// <summary>Field number for the "allowed_user" field.</summary>
        public const int AllowedUserFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions.Types.User> _repeated_allowedUser_codec
            = pb::FieldCodec.ForMessage(18, global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions.Types.User.Parser);
        private readonly pbc::RepeatedField<global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions.Types.User> allowedUser_ = new pbc::RepeatedField<global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions.Types.User>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions.Types.User> AllowedUser {
          get { return allowedUser_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Permissions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Permissions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AllowAny != other.AllowAny) return false;
          if(!allowedUser_.Equals(other.allowedUser_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AllowAny != false) hash ^= AllowAny.GetHashCode();
          hash ^= allowedUser_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AllowAny != false) {
            output.WriteRawTag(8);
            output.WriteBool(AllowAny);
          }
          allowedUser_.WriteTo(output, _repeated_allowedUser_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AllowAny != false) {
            size += 1 + 1;
          }
          size += allowedUser_.CalculateSize(_repeated_allowedUser_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Permissions other) {
          if (other == null) {
            return;
          }
          if (other.AllowAny != false) {
            AllowAny = other.AllowAny;
          }
          allowedUser_.Add(other.allowedUser_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                AllowAny = input.ReadBool();
                break;
              }
              case 18: {
                allowedUser_.AddEntriesFrom(input, _repeated_allowedUser_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Permissions message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class User : pb::IMessage<User> {
            private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<User> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Bacs.Archive.ArchiveServiceConfig.Types.Permissions.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public User() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public User(User other) : this() {
              identity_ = other.identity_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public User Clone() {
              return new User(this);
            }

            /// <summary>Field number for the "identity" field.</summary>
            public const int IdentityFieldNumber = 1;
            private static readonly pb::FieldCodec<string> _repeated_identity_codec
                = pb::FieldCodec.ForString(10);
            private readonly pbc::RepeatedField<string> identity_ = new pbc::RepeatedField<string>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> Identity {
              get { return identity_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as User);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(User other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!identity_.Equals(other.identity_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= identity_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              identity_.WriteTo(output, _repeated_identity_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += identity_.CalculateSize(_repeated_identity_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(User other) {
              if (other == null) {
                return;
              }
              identity_.Add(other.identity_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    identity_.AddEntriesFrom(input, _repeated_identity_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class ArchiveServerConfig : pb::IMessage<ArchiveServerConfig> {
    private static readonly pb::MessageParser<ArchiveServerConfig> _parser = new pb::MessageParser<ArchiveServerConfig>(() => new ArchiveServerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArchiveServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Archive.ArchiveReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchiveServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchiveServerConfig(ArchiveServerConfig other) : this() {
      listen_ = other.listen_;
      Service = other.service_ != null ? other.Service.Clone() : null;
      switch (other.CredentialsCase) {
        case CredentialsOneofCase.SslCredentials:
          SslCredentials = other.SslCredentials.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchiveServerConfig Clone() {
      return new ArchiveServerConfig(this);
    }

    /// <summary>Field number for the "listen" field.</summary>
    public const int ListenFieldNumber = 1;
    private string listen_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Listen {
      get { return listen_; }
      set {
        listen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private global::Bacs.Archive.ArchiveServiceConfig service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.ArchiveServiceConfig Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "ssl_credentials" field.</summary>
    public const int SslCredentialsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials SslCredentials {
      get { return credentialsCase_ == CredentialsOneofCase.SslCredentials ? (global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials) credentials_ : null; }
      set {
        credentials_ = value;
        credentialsCase_ = value == null ? CredentialsOneofCase.None : CredentialsOneofCase.SslCredentials;
      }
    }

    private object credentials_;
    /// <summary>Enum of possible cases for the "credentials" oneof.</summary>
    public enum CredentialsOneofCase {
      None = 0,
      SslCredentials = 3,
    }
    private CredentialsOneofCase credentialsCase_ = CredentialsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CredentialsOneofCase CredentialsCase {
      get { return credentialsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCredentials() {
      credentialsCase_ = CredentialsOneofCase.None;
      credentials_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArchiveServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArchiveServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Listen != other.Listen) return false;
      if (!object.Equals(Service, other.Service)) return false;
      if (!object.Equals(SslCredentials, other.SslCredentials)) return false;
      if (CredentialsCase != other.CredentialsCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Listen.Length != 0) hash ^= Listen.GetHashCode();
      if (service_ != null) hash ^= Service.GetHashCode();
      if (credentialsCase_ == CredentialsOneofCase.SslCredentials) hash ^= SslCredentials.GetHashCode();
      hash ^= (int) credentialsCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Listen.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Listen);
      }
      if (service_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Service);
      }
      if (credentialsCase_ == CredentialsOneofCase.SslCredentials) {
        output.WriteRawTag(26);
        output.WriteMessage(SslCredentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Listen.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Listen);
      }
      if (service_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Service);
      }
      if (credentialsCase_ == CredentialsOneofCase.SslCredentials) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SslCredentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArchiveServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.Listen.Length != 0) {
        Listen = other.Listen;
      }
      if (other.service_ != null) {
        if (service_ == null) {
          service_ = new global::Bacs.Archive.ArchiveServiceConfig();
        }
        Service.MergeFrom(other.Service);
      }
      switch (other.CredentialsCase) {
        case CredentialsOneofCase.SslCredentials:
          SslCredentials = other.SslCredentials;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Listen = input.ReadString();
            break;
          }
          case 18: {
            if (service_ == null) {
              service_ = new global::Bacs.Archive.ArchiveServiceConfig();
            }
            input.ReadMessage(service_);
            break;
          }
          case 26: {
            global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials subBuilder = new global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials();
            if (credentialsCase_ == CredentialsOneofCase.SslCredentials) {
              subBuilder.MergeFrom(SslCredentials);
            }
            input.ReadMessage(subBuilder);
            SslCredentials = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArchiveServerConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SslCredentials : pb::IMessage<SslCredentials> {
        private static readonly pb::MessageParser<SslCredentials> _parser = new pb::MessageParser<SslCredentials>(() => new SslCredentials());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SslCredentials> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bacs.Archive.ArchiveServerConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SslCredentials() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SslCredentials(SslCredentials other) : this() {
          pemRootCertsPath_ = other.pemRootCertsPath_;
          pemKeyCertPair_ = other.pemKeyCertPair_.Clone();
          forceClientAuth_ = other.forceClientAuth_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SslCredentials Clone() {
          return new SslCredentials(this);
        }

        /// <summary>Field number for the "pem_root_certs_path" field.</summary>
        public const int PemRootCertsPathFieldNumber = 1;
        private string pemRootCertsPath_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PemRootCertsPath {
          get { return pemRootCertsPath_; }
          set {
            pemRootCertsPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pem_key_cert_pair" field.</summary>
        public const int PemKeyCertPairFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials.Types.PemKeyCertPair> _repeated_pemKeyCertPair_codec
            = pb::FieldCodec.ForMessage(18, global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials.Types.PemKeyCertPair.Parser);
        private readonly pbc::RepeatedField<global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials.Types.PemKeyCertPair> pemKeyCertPair_ = new pbc::RepeatedField<global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials.Types.PemKeyCertPair>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials.Types.PemKeyCertPair> PemKeyCertPair {
          get { return pemKeyCertPair_; }
        }

        /// <summary>Field number for the "force_client_auth" field.</summary>
        public const int ForceClientAuthFieldNumber = 3;
        private bool forceClientAuth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ForceClientAuth {
          get { return forceClientAuth_; }
          set {
            forceClientAuth_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SslCredentials);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SslCredentials other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PemRootCertsPath != other.PemRootCertsPath) return false;
          if(!pemKeyCertPair_.Equals(other.pemKeyCertPair_)) return false;
          if (ForceClientAuth != other.ForceClientAuth) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PemRootCertsPath.Length != 0) hash ^= PemRootCertsPath.GetHashCode();
          hash ^= pemKeyCertPair_.GetHashCode();
          if (ForceClientAuth != false) hash ^= ForceClientAuth.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PemRootCertsPath.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PemRootCertsPath);
          }
          pemKeyCertPair_.WriteTo(output, _repeated_pemKeyCertPair_codec);
          if (ForceClientAuth != false) {
            output.WriteRawTag(24);
            output.WriteBool(ForceClientAuth);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PemRootCertsPath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PemRootCertsPath);
          }
          size += pemKeyCertPair_.CalculateSize(_repeated_pemKeyCertPair_codec);
          if (ForceClientAuth != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SslCredentials other) {
          if (other == null) {
            return;
          }
          if (other.PemRootCertsPath.Length != 0) {
            PemRootCertsPath = other.PemRootCertsPath;
          }
          pemKeyCertPair_.Add(other.pemKeyCertPair_);
          if (other.ForceClientAuth != false) {
            ForceClientAuth = other.ForceClientAuth;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                PemRootCertsPath = input.ReadString();
                break;
              }
              case 18: {
                pemKeyCertPair_.AddEntriesFrom(input, _repeated_pemKeyCertPair_codec);
                break;
              }
              case 24: {
                ForceClientAuth = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the SslCredentials message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class PemKeyCertPair : pb::IMessage<PemKeyCertPair> {
            private static readonly pb::MessageParser<PemKeyCertPair> _parser = new pb::MessageParser<PemKeyCertPair>(() => new PemKeyCertPair());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PemKeyCertPair> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Bacs.Archive.ArchiveServerConfig.Types.SslCredentials.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PemKeyCertPair() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PemKeyCertPair(PemKeyCertPair other) : this() {
              privateKeyPath_ = other.privateKeyPath_;
              certChainPath_ = other.certChainPath_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PemKeyCertPair Clone() {
              return new PemKeyCertPair(this);
            }

            /// <summary>Field number for the "private_key_path" field.</summary>
            public const int PrivateKeyPathFieldNumber = 1;
            private string privateKeyPath_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string PrivateKeyPath {
              get { return privateKeyPath_; }
              set {
                privateKeyPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "cert_chain_path" field.</summary>
            public const int CertChainPathFieldNumber = 2;
            private string certChainPath_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CertChainPath {
              get { return certChainPath_; }
              set {
                certChainPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PemKeyCertPair);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PemKeyCertPair other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (PrivateKeyPath != other.PrivateKeyPath) return false;
              if (CertChainPath != other.CertChainPath) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (PrivateKeyPath.Length != 0) hash ^= PrivateKeyPath.GetHashCode();
              if (CertChainPath.Length != 0) hash ^= CertChainPath.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (PrivateKeyPath.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(PrivateKeyPath);
              }
              if (CertChainPath.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(CertChainPath);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (PrivateKeyPath.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKeyPath);
              }
              if (CertChainPath.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CertChainPath);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PemKeyCertPair other) {
              if (other == null) {
                return;
              }
              if (other.PrivateKeyPath.Length != 0) {
                PrivateKeyPath = other.PrivateKeyPath;
              }
              if (other.CertChainPath.Length != 0) {
                CertChainPath = other.CertChainPath;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    PrivateKeyPath = input.ReadString();
                    break;
                  }
                  case 18: {
                    CertChainPath = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
