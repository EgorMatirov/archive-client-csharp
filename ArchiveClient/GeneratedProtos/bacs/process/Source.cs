// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bacs/process/source.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bacs.Process {

  /// <summary>Holder for reflection information generated from bacs/process/source.proto</summary>
  public static partial class SourceReflection {

    #region Descriptor
    /// <summary>File descriptor for bacs/process/source.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChliYWNzL3Byb2Nlc3Mvc291cmNlLnByb3RvEgxiYWNzLnByb2Nlc3MaG2Jh",
            "Y3MvcHJvY2Vzcy9yZXNvdXJjZS5wcm90bxobYmFjcy91dGlsaXR5L2FyY2hp",
            "dmVyLnByb3RvIkAKBlNvdXJjZRIMCgRkYXRhGAEgASgMEigKCGFyY2hpdmVy",
            "GAIgASgLMhYuYmFjcy51dGlsaXR5LkFyY2hpdmVyImYKCUJ1aWxkYWJsZRIk",
            "CgZzb3VyY2UYASABKAsyFC5iYWNzLnByb2Nlc3MuU291cmNlEjMKDmJ1aWxk",
            "X3NldHRpbmdzGAIgASgLMhsuYmFjcy5wcm9jZXNzLkJ1aWxkU2V0dGluZ3Mi",
            "cwoNQnVpbGRTZXR0aW5ncxIrCgZjb25maWcYASABKAsyGy5iYWNzLnByb2Nl",
            "c3MuQnVpbGRlckNvbmZpZxI1Cg9yZXNvdXJjZV9saW1pdHMYAiABKAsyHC5i",
            "YWNzLnByb2Nlc3MuUmVzb3VyY2VMaW1pdHMiLwoNQnVpbGRlckNvbmZpZxIM",
            "CgR0eXBlGAEgASgJEhAKCGFyZ3VtZW50GAIgAygJIp8BCgtCdWlsZFJlc3Vs",
            "dBIwCgZzdGF0dXMYASABKA4yIC5iYWNzLnByb2Nlc3MuQnVpbGRSZXN1bHQu",
            "U3RhdHVzEjAKCWV4ZWN1dGlvbhgCIAEoCzIdLmJhY3MucHJvY2Vzcy5FeGVj",
            "dXRpb25SZXN1bHQSDgoGb3V0cHV0GAMgASgMIhwKBlN0YXR1cxIGCgJPSxAA",
            "EgoKBkZBSUxFRBABIv0CCg9FeGVjdXRpb25SZXN1bHQSNAoGc3RhdHVzGAEg",
            "ASgOMiQuYmFjcy5wcm9jZXNzLkV4ZWN1dGlvblJlc3VsdC5TdGF0dXMSFQoL",
            "ZXhpdF9zdGF0dXMYAiABKAVIABISCgh0ZXJtX3NpZxgDIAEoBUgAEjMKDnJl",
            "c291cmNlX3VzYWdlGAQgASgLMhsuYmFjcy5wcm9jZXNzLlJlc291cmNlVXNh",
            "Z2USDAoEZnVsbBgFIAEoDCK2AQoGU3RhdHVzEgYKAk9LEAASEQoNQUJOT1JN",
            "QUxfRVhJVBABEhkKFU1FTU9SWV9MSU1JVF9FWENFRURFRBACEhcKE1RJTUVf",
            "TElNSVRfRVhDRUVERUQQAxIZChVPVVRQVVRfTElNSVRfRVhDRUVERUQQBBIc",
            "ChhSRUFMX1RJTUVfTElNSVRfRVhDRUVERUQQBRIYChRURVJNSU5BVEVEX0JZ",
            "X1NZU1RFTRAGEgoKBkZBSUxFRBAHQg0KC3Rlcm1pbmF0aW9uQglaB3Byb2Nl",
            "c3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bacs.Process.ResourceReflection.Descriptor, global::Bacs.Utility.ArchiverReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Process.Source), global::Bacs.Process.Source.Parser, new[]{ "Data", "Archiver" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Process.Buildable), global::Bacs.Process.Buildable.Parser, new[]{ "Source", "BuildSettings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Process.BuildSettings), global::Bacs.Process.BuildSettings.Parser, new[]{ "Config", "ResourceLimits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Process.BuilderConfig), global::Bacs.Process.BuilderConfig.Parser, new[]{ "Type", "Argument" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Process.BuildResult), global::Bacs.Process.BuildResult.Parser, new[]{ "Status", "Execution", "Output" }, null, new[]{ typeof(global::Bacs.Process.BuildResult.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Process.ExecutionResult), global::Bacs.Process.ExecutionResult.Parser, new[]{ "Status", "ExitStatus", "TermSig", "ResourceUsage", "Full" }, new[]{ "Termination" }, new[]{ typeof(global::Bacs.Process.ExecutionResult.Types.Status) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Source : pb::IMessage<Source> {
    private static readonly pb::MessageParser<Source> _parser = new pb::MessageParser<Source>(() => new Source());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Process.SourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source(Source other) : this() {
      data_ = other.data_;
      Archiver = other.archiver_ != null ? other.Archiver.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source Clone() {
      return new Source(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "archiver" field.</summary>
    public const int ArchiverFieldNumber = 2;
    private global::Bacs.Utility.Archiver archiver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Utility.Archiver Archiver {
      get { return archiver_; }
      set {
        archiver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (!object.Equals(Archiver, other.Archiver)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (archiver_ != null) hash ^= Archiver.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (archiver_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Archiver);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (archiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Archiver);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Source other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.archiver_ != null) {
        if (archiver_ == null) {
          archiver_ = new global::Bacs.Utility.Archiver();
        }
        Archiver.MergeFrom(other.Archiver);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 18: {
            if (archiver_ == null) {
              archiver_ = new global::Bacs.Utility.Archiver();
            }
            input.ReadMessage(archiver_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Buildable : pb::IMessage<Buildable> {
    private static readonly pb::MessageParser<Buildable> _parser = new pb::MessageParser<Buildable>(() => new Buildable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Buildable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Process.SourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buildable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buildable(Buildable other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      BuildSettings = other.buildSettings_ != null ? other.BuildSettings.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buildable Clone() {
      return new Buildable(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::Bacs.Process.Source source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Process.Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "build_settings" field.</summary>
    public const int BuildSettingsFieldNumber = 2;
    private global::Bacs.Process.BuildSettings buildSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Process.BuildSettings BuildSettings {
      get { return buildSettings_; }
      set {
        buildSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Buildable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Buildable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(BuildSettings, other.BuildSettings)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (buildSettings_ != null) hash ^= BuildSettings.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (buildSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BuildSettings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (buildSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildSettings);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Buildable other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Bacs.Process.Source();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.buildSettings_ != null) {
        if (buildSettings_ == null) {
          buildSettings_ = new global::Bacs.Process.BuildSettings();
        }
        BuildSettings.MergeFrom(other.BuildSettings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::Bacs.Process.Source();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            if (buildSettings_ == null) {
              buildSettings_ = new global::Bacs.Process.BuildSettings();
            }
            input.ReadMessage(buildSettings_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildSettings : pb::IMessage<BuildSettings> {
    private static readonly pb::MessageParser<BuildSettings> _parser = new pb::MessageParser<BuildSettings>(() => new BuildSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Process.SourceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildSettings(BuildSettings other) : this() {
      Config = other.config_ != null ? other.Config.Clone() : null;
      ResourceLimits = other.resourceLimits_ != null ? other.ResourceLimits.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildSettings Clone() {
      return new BuildSettings(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Bacs.Process.BuilderConfig config_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Process.BuilderConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "resource_limits" field.</summary>
    public const int ResourceLimitsFieldNumber = 2;
    private global::Bacs.Process.ResourceLimits resourceLimits_;
    /// <summary>
    /// / Constraints for build system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Process.ResourceLimits ResourceLimits {
      get { return resourceLimits_; }
      set {
        resourceLimits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(ResourceLimits, other.ResourceLimits)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (resourceLimits_ != null) hash ^= ResourceLimits.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (resourceLimits_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResourceLimits);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (resourceLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceLimits);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildSettings other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Bacs.Process.BuilderConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.resourceLimits_ != null) {
        if (resourceLimits_ == null) {
          resourceLimits_ = new global::Bacs.Process.ResourceLimits();
        }
        ResourceLimits.MergeFrom(other.ResourceLimits);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (config_ == null) {
              config_ = new global::Bacs.Process.BuilderConfig();
            }
            input.ReadMessage(config_);
            break;
          }
          case 18: {
            if (resourceLimits_ == null) {
              resourceLimits_ = new global::Bacs.Process.ResourceLimits();
            }
            input.ReadMessage(resourceLimits_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// !
  ///  One of implemented build systems.
  ///  For simple cases it may be compiler name with options,
  ///  e.g. {type = "gcc", arguments = ["-O2"]}.
  /// </summary>
  public sealed partial class BuilderConfig : pb::IMessage<BuilderConfig> {
    private static readonly pb::MessageParser<BuilderConfig> _parser = new pb::MessageParser<BuilderConfig>(() => new BuilderConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuilderConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Process.SourceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuilderConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuilderConfig(BuilderConfig other) : this() {
      type_ = other.type_;
      argument_ = other.argument_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuilderConfig Clone() {
      return new BuilderConfig(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "argument" field.</summary>
    public const int ArgumentFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_argument_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> argument_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Argument {
      get { return argument_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuilderConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuilderConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!argument_.Equals(other.argument_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= argument_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      argument_.WriteTo(output, _repeated_argument_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += argument_.CalculateSize(_repeated_argument_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuilderConfig other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      argument_.Add(other.argument_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            argument_.AddEntriesFrom(input, _repeated_argument_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildResult : pb::IMessage<BuildResult> {
    private static readonly pb::MessageParser<BuildResult> _parser = new pb::MessageParser<BuildResult>(() => new BuildResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Process.SourceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildResult(BuildResult other) : this() {
      status_ = other.status_;
      Execution = other.execution_ != null ? other.Execution.Clone() : null;
      output_ = other.output_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildResult Clone() {
      return new BuildResult(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Bacs.Process.BuildResult.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Process.BuildResult.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "execution" field.</summary>
    public const int ExecutionFieldNumber = 2;
    private global::Bacs.Process.ExecutionResult execution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Process.ExecutionResult Execution {
      get { return execution_; }
      set {
        execution_ = value;
      }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 3;
    private pb::ByteString output_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Output {
      get { return output_; }
      set {
        output_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Execution, other.Execution)) return false;
      if (Output != other.Output) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (execution_ != null) hash ^= Execution.GetHashCode();
      if (Output.Length != 0) hash ^= Output.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (execution_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Execution);
      }
      if (Output.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (execution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Execution);
      }
      if (Output.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Output);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildResult other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.execution_ != null) {
        if (execution_ == null) {
          execution_ = new global::Bacs.Process.ExecutionResult();
        }
        Execution.MergeFrom(other.Execution);
      }
      if (other.Output.Length != 0) {
        Output = other.Output;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Bacs.Process.BuildResult.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (execution_ == null) {
              execution_ = new global::Bacs.Process.ExecutionResult();
            }
            input.ReadMessage(execution_);
            break;
          }
          case 26: {
            Output = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BuildResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("FAILED")] Failed = 1,
      }

    }
    #endregion

  }

  public sealed partial class ExecutionResult : pb::IMessage<ExecutionResult> {
    private static readonly pb::MessageParser<ExecutionResult> _parser = new pb::MessageParser<ExecutionResult>(() => new ExecutionResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecutionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Process.SourceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionResult(ExecutionResult other) : this() {
      status_ = other.status_;
      ResourceUsage = other.resourceUsage_ != null ? other.ResourceUsage.Clone() : null;
      full_ = other.full_;
      switch (other.TerminationCase) {
        case TerminationOneofCase.ExitStatus:
          ExitStatus = other.ExitStatus;
          break;
        case TerminationOneofCase.TermSig:
          TermSig = other.TermSig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionResult Clone() {
      return new ExecutionResult(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Bacs.Process.ExecutionResult.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Process.ExecutionResult.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "exit_status" field.</summary>
    public const int ExitStatusFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExitStatus {
      get { return terminationCase_ == TerminationOneofCase.ExitStatus ? (int) termination_ : 0; }
      set {
        termination_ = value;
        terminationCase_ = TerminationOneofCase.ExitStatus;
      }
    }

    /// <summary>Field number for the "term_sig" field.</summary>
    public const int TermSigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TermSig {
      get { return terminationCase_ == TerminationOneofCase.TermSig ? (int) termination_ : 0; }
      set {
        termination_ = value;
        terminationCase_ = TerminationOneofCase.TermSig;
      }
    }

    /// <summary>Field number for the "resource_usage" field.</summary>
    public const int ResourceUsageFieldNumber = 4;
    private global::Bacs.Process.ResourceUsage resourceUsage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Process.ResourceUsage ResourceUsage {
      get { return resourceUsage_; }
      set {
        resourceUsage_ = value;
      }
    }

    /// <summary>Field number for the "full" field.</summary>
    public const int FullFieldNumber = 5;
    private pb::ByteString full_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Full {
      get { return full_; }
      set {
        full_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object termination_;
    /// <summary>Enum of possible cases for the "termination" oneof.</summary>
    public enum TerminationOneofCase {
      None = 0,
      ExitStatus = 2,
      TermSig = 3,
    }
    private TerminationOneofCase terminationCase_ = TerminationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerminationOneofCase TerminationCase {
      get { return terminationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTermination() {
      terminationCase_ = TerminationOneofCase.None;
      termination_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecutionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecutionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (ExitStatus != other.ExitStatus) return false;
      if (TermSig != other.TermSig) return false;
      if (!object.Equals(ResourceUsage, other.ResourceUsage)) return false;
      if (Full != other.Full) return false;
      if (TerminationCase != other.TerminationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (terminationCase_ == TerminationOneofCase.ExitStatus) hash ^= ExitStatus.GetHashCode();
      if (terminationCase_ == TerminationOneofCase.TermSig) hash ^= TermSig.GetHashCode();
      if (resourceUsage_ != null) hash ^= ResourceUsage.GetHashCode();
      if (Full.Length != 0) hash ^= Full.GetHashCode();
      hash ^= (int) terminationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (terminationCase_ == TerminationOneofCase.ExitStatus) {
        output.WriteRawTag(16);
        output.WriteInt32(ExitStatus);
      }
      if (terminationCase_ == TerminationOneofCase.TermSig) {
        output.WriteRawTag(24);
        output.WriteInt32(TermSig);
      }
      if (resourceUsage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ResourceUsage);
      }
      if (Full.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Full);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (terminationCase_ == TerminationOneofCase.ExitStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExitStatus);
      }
      if (terminationCase_ == TerminationOneofCase.TermSig) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TermSig);
      }
      if (resourceUsage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceUsage);
      }
      if (Full.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Full);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecutionResult other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.resourceUsage_ != null) {
        if (resourceUsage_ == null) {
          resourceUsage_ = new global::Bacs.Process.ResourceUsage();
        }
        ResourceUsage.MergeFrom(other.ResourceUsage);
      }
      if (other.Full.Length != 0) {
        Full = other.Full;
      }
      switch (other.TerminationCase) {
        case TerminationOneofCase.ExitStatus:
          ExitStatus = other.ExitStatus;
          break;
        case TerminationOneofCase.TermSig:
          TermSig = other.TermSig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Bacs.Process.ExecutionResult.Types.Status) input.ReadEnum();
            break;
          }
          case 16: {
            ExitStatus = input.ReadInt32();
            break;
          }
          case 24: {
            TermSig = input.ReadInt32();
            break;
          }
          case 34: {
            if (resourceUsage_ == null) {
              resourceUsage_ = new global::Bacs.Process.ResourceUsage();
            }
            input.ReadMessage(resourceUsage_);
            break;
          }
          case 42: {
            Full = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ExecutionResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("ABNORMAL_EXIT")] AbnormalExit = 1,
        [pbr::OriginalName("MEMORY_LIMIT_EXCEEDED")] MemoryLimitExceeded = 2,
        [pbr::OriginalName("TIME_LIMIT_EXCEEDED")] TimeLimitExceeded = 3,
        [pbr::OriginalName("OUTPUT_LIMIT_EXCEEDED")] OutputLimitExceeded = 4,
        [pbr::OriginalName("REAL_TIME_LIMIT_EXCEEDED")] RealTimeLimitExceeded = 5,
        [pbr::OriginalName("TERMINATED_BY_SYSTEM")] TerminatedBySystem = 6,
        [pbr::OriginalName("FAILED")] Failed = 7,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
