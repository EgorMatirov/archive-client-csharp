// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bacs/process/resource.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bacs.Process {

  /// <summary>Holder for reflection information generated from bacs/process/resource.proto</summary>
  public static partial class ResourceReflection {

    #region Descriptor
    /// <summary>File descriptor for bacs/process/resource.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtiYWNzL3Byb2Nlc3MvcmVzb3VyY2UucHJvdG8SDGJhY3MucHJvY2VzcyKg",
            "AQoOUmVzb3VyY2VMaW1pdHMSGQoRdGltZV9saW1pdF9taWxsaXMYASABKAQS",
            "GgoSbWVtb3J5X2xpbWl0X2J5dGVzGAIgASgEEhoKEm91dHB1dF9saW1pdF9i",
            "eXRlcxgDIAEoBBIbChNudW1iZXJfb2ZfcHJvY2Vzc2VzGAQgASgEEh4KFnJl",
            "YWxfdGltZV9saW1pdF9taWxsaXMYBSABKAQiRgoNUmVzb3VyY2VVc2FnZRIZ",
            "ChF0aW1lX3VzYWdlX21pbGxpcxgBIAEoBBIaChJtZW1vcnlfdXNhZ2VfYnl0",
            "ZXMYAiABKARCCVoHcHJvY2Vzc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Process.ResourceLimits), global::Bacs.Process.ResourceLimits.Parser, new[]{ "TimeLimitMillis", "MemoryLimitBytes", "OutputLimitBytes", "NumberOfProcesses", "RealTimeLimitMillis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Process.ResourceUsage), global::Bacs.Process.ResourceUsage.Parser, new[]{ "TimeUsageMillis", "MemoryUsageBytes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ResourceLimits : pb::IMessage<ResourceLimits> {
    private static readonly pb::MessageParser<ResourceLimits> _parser = new pb::MessageParser<ResourceLimits>(() => new ResourceLimits());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceLimits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Process.ResourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceLimits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceLimits(ResourceLimits other) : this() {
      timeLimitMillis_ = other.timeLimitMillis_;
      memoryLimitBytes_ = other.memoryLimitBytes_;
      outputLimitBytes_ = other.outputLimitBytes_;
      numberOfProcesses_ = other.numberOfProcesses_;
      realTimeLimitMillis_ = other.realTimeLimitMillis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceLimits Clone() {
      return new ResourceLimits(this);
    }

    /// <summary>Field number for the "time_limit_millis" field.</summary>
    public const int TimeLimitMillisFieldNumber = 1;
    private ulong timeLimitMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeLimitMillis {
      get { return timeLimitMillis_; }
      set {
        timeLimitMillis_ = value;
      }
    }

    /// <summary>Field number for the "memory_limit_bytes" field.</summary>
    public const int MemoryLimitBytesFieldNumber = 2;
    private ulong memoryLimitBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemoryLimitBytes {
      get { return memoryLimitBytes_; }
      set {
        memoryLimitBytes_ = value;
      }
    }

    /// <summary>Field number for the "output_limit_bytes" field.</summary>
    public const int OutputLimitBytesFieldNumber = 3;
    private ulong outputLimitBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutputLimitBytes {
      get { return outputLimitBytes_; }
      set {
        outputLimitBytes_ = value;
      }
    }

    /// <summary>Field number for the "number_of_processes" field.</summary>
    public const int NumberOfProcessesFieldNumber = 4;
    private ulong numberOfProcesses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumberOfProcesses {
      get { return numberOfProcesses_; }
      set {
        numberOfProcesses_ = value;
      }
    }

    /// <summary>Field number for the "real_time_limit_millis" field.</summary>
    public const int RealTimeLimitMillisFieldNumber = 5;
    private ulong realTimeLimitMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RealTimeLimitMillis {
      get { return realTimeLimitMillis_; }
      set {
        realTimeLimitMillis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceLimits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceLimits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeLimitMillis != other.TimeLimitMillis) return false;
      if (MemoryLimitBytes != other.MemoryLimitBytes) return false;
      if (OutputLimitBytes != other.OutputLimitBytes) return false;
      if (NumberOfProcesses != other.NumberOfProcesses) return false;
      if (RealTimeLimitMillis != other.RealTimeLimitMillis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeLimitMillis != 0UL) hash ^= TimeLimitMillis.GetHashCode();
      if (MemoryLimitBytes != 0UL) hash ^= MemoryLimitBytes.GetHashCode();
      if (OutputLimitBytes != 0UL) hash ^= OutputLimitBytes.GetHashCode();
      if (NumberOfProcesses != 0UL) hash ^= NumberOfProcesses.GetHashCode();
      if (RealTimeLimitMillis != 0UL) hash ^= RealTimeLimitMillis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeLimitMillis != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TimeLimitMillis);
      }
      if (MemoryLimitBytes != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MemoryLimitBytes);
      }
      if (OutputLimitBytes != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(OutputLimitBytes);
      }
      if (NumberOfProcesses != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(NumberOfProcesses);
      }
      if (RealTimeLimitMillis != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(RealTimeLimitMillis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeLimitMillis != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeLimitMillis);
      }
      if (MemoryLimitBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemoryLimitBytes);
      }
      if (OutputLimitBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutputLimitBytes);
      }
      if (NumberOfProcesses != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumberOfProcesses);
      }
      if (RealTimeLimitMillis != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RealTimeLimitMillis);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceLimits other) {
      if (other == null) {
        return;
      }
      if (other.TimeLimitMillis != 0UL) {
        TimeLimitMillis = other.TimeLimitMillis;
      }
      if (other.MemoryLimitBytes != 0UL) {
        MemoryLimitBytes = other.MemoryLimitBytes;
      }
      if (other.OutputLimitBytes != 0UL) {
        OutputLimitBytes = other.OutputLimitBytes;
      }
      if (other.NumberOfProcesses != 0UL) {
        NumberOfProcesses = other.NumberOfProcesses;
      }
      if (other.RealTimeLimitMillis != 0UL) {
        RealTimeLimitMillis = other.RealTimeLimitMillis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeLimitMillis = input.ReadUInt64();
            break;
          }
          case 16: {
            MemoryLimitBytes = input.ReadUInt64();
            break;
          }
          case 24: {
            OutputLimitBytes = input.ReadUInt64();
            break;
          }
          case 32: {
            NumberOfProcesses = input.ReadUInt64();
            break;
          }
          case 40: {
            RealTimeLimitMillis = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceUsage : pb::IMessage<ResourceUsage> {
    private static readonly pb::MessageParser<ResourceUsage> _parser = new pb::MessageParser<ResourceUsage>(() => new ResourceUsage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceUsage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Process.ResourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUsage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUsage(ResourceUsage other) : this() {
      timeUsageMillis_ = other.timeUsageMillis_;
      memoryUsageBytes_ = other.memoryUsageBytes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUsage Clone() {
      return new ResourceUsage(this);
    }

    /// <summary>Field number for the "time_usage_millis" field.</summary>
    public const int TimeUsageMillisFieldNumber = 1;
    private ulong timeUsageMillis_;
    /// <summary>
    ///  TODO: do we need to export Process::ResourceUsage::timeUsage?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeUsageMillis {
      get { return timeUsageMillis_; }
      set {
        timeUsageMillis_ = value;
      }
    }

    /// <summary>Field number for the "memory_usage_bytes" field.</summary>
    public const int MemoryUsageBytesFieldNumber = 2;
    private ulong memoryUsageBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemoryUsageBytes {
      get { return memoryUsageBytes_; }
      set {
        memoryUsageBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceUsage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceUsage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeUsageMillis != other.TimeUsageMillis) return false;
      if (MemoryUsageBytes != other.MemoryUsageBytes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeUsageMillis != 0UL) hash ^= TimeUsageMillis.GetHashCode();
      if (MemoryUsageBytes != 0UL) hash ^= MemoryUsageBytes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeUsageMillis != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TimeUsageMillis);
      }
      if (MemoryUsageBytes != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MemoryUsageBytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeUsageMillis != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeUsageMillis);
      }
      if (MemoryUsageBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemoryUsageBytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceUsage other) {
      if (other == null) {
        return;
      }
      if (other.TimeUsageMillis != 0UL) {
        TimeUsageMillis = other.TimeUsageMillis;
      }
      if (other.MemoryUsageBytes != 0UL) {
        MemoryUsageBytes = other.MemoryUsageBytes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeUsageMillis = input.ReadUInt64();
            break;
          }
          case 16: {
            MemoryUsageBytes = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
