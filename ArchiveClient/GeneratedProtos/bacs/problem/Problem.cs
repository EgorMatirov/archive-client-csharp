// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bacs/problem/problem.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bacs.Problem {

  /// <summary>Holder for reflection information generated from bacs/problem/problem.proto</summary>
  public static partial class ProblemReflection {

    #region Descriptor
    /// <summary>File descriptor for bacs/problem/problem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProblemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpiYWNzL3Byb2JsZW0vcHJvYmxlbS5wcm90bxIMYmFjcy5wcm9ibGVtGhln",
            "b29nbGUvcHJvdG9idWYvYW55LnByb3RvIssCCgdQcm9ibGVtEiQKBnN5c3Rl",
            "bRgBIAEoCzIULmJhY3MucHJvYmxlbS5TeXN0ZW0SIAoEaW5mbxgCIAEoCzIS",
            "LmJhY3MucHJvYmxlbS5JbmZvEioKCXN0YXRlbWVudBgDIAEoCzIXLmJhY3Mu",
            "cHJvYmxlbS5TdGF0ZW1lbnQSJgoHcHJvZmlsZRgEIAMoCzIVLmJhY3MucHJv",
            "YmxlbS5Qcm9maWxlEjMKB3V0aWxpdHkYBSADKAsyIi5iYWNzLnByb2JsZW0u",
            "UHJvYmxlbS5VdGlsaXR5RW50cnkSKAoJZXh0ZW5zaW9uGOgHIAEoCzIULmdv",
            "b2dsZS5wcm90b2J1Zi5BbnkaRQoMVXRpbGl0eUVudHJ5EgsKA2tleRgBIAEo",
            "CRIkCgV2YWx1ZRgCIAEoCzIVLmJhY3MucHJvYmxlbS5VdGlsaXR5OgI4ASJZ",
            "CgZTeXN0ZW0SFAoMcHJvYmxlbV90eXBlGAEgASgJEg8KB3BhY2thZ2UYAiAB",
            "KAkSKAoIcmV2aXNpb24YAyABKAsyFi5iYWNzLnByb2JsZW0uUmV2aXNpb24i",
            "GQoIUmV2aXNpb24SDQoFdmFsdWUYASABKAwiigEKBEluZm8SJQoEbmFtZRgB",
            "IAMoCzIXLmJhY3MucHJvYmxlbS5JbmZvLk5hbWUSDgoGYXV0aG9yGAIgAygJ",
            "Eg4KBnNvdXJjZRgDIAEoCRISCgptYWludGFpbmVyGAQgAygJGicKBE5hbWUS",
            "EAoIbGFuZ3VhZ2UYASABKAkSDQoFdmFsdWUYAiABKAkiuQIKCVN0YXRlbWVu",
            "dBIwCgd2ZXJzaW9uGAEgAygLMh8uYmFjcy5wcm9ibGVtLlN0YXRlbWVudC5W",
            "ZXJzaW9uGvkBCgdWZXJzaW9uEhAKCGxhbmd1YWdlGAEgASgJEg4KBmZvcm1h",
            "dBgCIAEoCRIPCgdwYWNrYWdlGAMgASgJGroBCghNYW5pZmVzdBIwCgd2ZXJz",
            "aW9uGAEgASgLMh8uYmFjcy5wcm9ibGVtLlN0YXRlbWVudC5WZXJzaW9uEigK",
            "CHJldmlzaW9uGAIgASgLMhYuYmFjcy5wcm9ibGVtLlJldmlzaW9uEjsKBGRh",
            "dGEYAyABKAsyLS5iYWNzLnByb2JsZW0uU3RhdGVtZW50LlZlcnNpb24uTWFu",
            "aWZlc3QuRGF0YRoVCgREYXRhEg0KBWluZGV4GAEgASgJIkgKB1Byb2ZpbGUS",
            "EwoLZGVzY3JpcHRpb24YASABKAkSKAoJZXh0ZW5zaW9uGOgHIAEoCzIULmdv",
            "b2dsZS5wcm90b2J1Zi5BbnkicAoHVXRpbGl0eRIUCgxidWlsZGVyX25hbWUY",
            "ASABKAkSJQoGbmVzdGVkGGQgAygLMhUuYmFjcy5wcm9ibGVtLlV0aWxpdHkS",
            "KAoJZXh0ZW5zaW9uGOgHIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCCVoH",
            "cHJvYmxlbWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Problem), global::Bacs.Problem.Problem.Parser, new[]{ "System", "Info", "Statement", "Profile", "Utility", "Extension" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.System), global::Bacs.Problem.System.Parser, new[]{ "ProblemType", "Package", "Revision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Revision), global::Bacs.Problem.Revision.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Info), global::Bacs.Problem.Info.Parser, new[]{ "Name", "Author", "Source", "Maintainer" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Info.Types.Name), global::Bacs.Problem.Info.Types.Name.Parser, new[]{ "Language", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Statement), global::Bacs.Problem.Statement.Parser, new[]{ "Version" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Statement.Types.Version), global::Bacs.Problem.Statement.Types.Version.Parser, new[]{ "Language", "Format", "Package" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Statement.Types.Version.Types.Manifest), global::Bacs.Problem.Statement.Types.Version.Types.Manifest.Parser, new[]{ "Version", "Revision", "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Statement.Types.Version.Types.Manifest.Types.Data), global::Bacs.Problem.Statement.Types.Version.Types.Manifest.Types.Data.Parser, new[]{ "Index" }, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Profile), global::Bacs.Problem.Profile.Parser, new[]{ "Description", "Extension" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bacs.Problem.Utility), global::Bacs.Problem.Utility.Parser, new[]{ "BuilderName", "Nested", "Extension" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Problem : pb::IMessage<Problem> {
    private static readonly pb::MessageParser<Problem> _parser = new pb::MessageParser<Problem>(() => new Problem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Problem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Problem.ProblemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Problem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Problem(Problem other) : this() {
      System = other.system_ != null ? other.System.Clone() : null;
      Info = other.info_ != null ? other.Info.Clone() : null;
      Statement = other.statement_ != null ? other.Statement.Clone() : null;
      profile_ = other.profile_.Clone();
      utility_ = other.utility_.Clone();
      Extension = other.extension_ != null ? other.Extension.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Problem Clone() {
      return new Problem(this);
    }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 1;
    private global::Bacs.Problem.System system_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Problem.System System {
      get { return system_; }
      set {
        system_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Bacs.Problem.Info info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Problem.Info Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "statement" field.</summary>
    public const int StatementFieldNumber = 3;
    private global::Bacs.Problem.Statement statement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Problem.Statement Statement {
      get { return statement_; }
      set {
        statement_ = value;
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Bacs.Problem.Profile> _repeated_profile_codec
        = pb::FieldCodec.ForMessage(34, global::Bacs.Problem.Profile.Parser);
    private readonly pbc::RepeatedField<global::Bacs.Problem.Profile> profile_ = new pbc::RepeatedField<global::Bacs.Problem.Profile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bacs.Problem.Profile> Profile {
      get { return profile_; }
    }

    /// <summary>Field number for the "utility" field.</summary>
    public const int UtilityFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Bacs.Problem.Utility>.Codec _map_utility_codec
        = new pbc::MapField<string, global::Bacs.Problem.Utility>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Bacs.Problem.Utility.Parser), 42);
    private readonly pbc::MapField<string, global::Bacs.Problem.Utility> utility_ = new pbc::MapField<string, global::Bacs.Problem.Utility>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Bacs.Problem.Utility> Utility {
      get { return utility_; }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 1000;
    private global::Google.Protobuf.WellKnownTypes.Any extension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return extension_; }
      set {
        extension_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Problem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Problem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(System, other.System)) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(Statement, other.Statement)) return false;
      if(!profile_.Equals(other.profile_)) return false;
      if (!Utility.Equals(other.Utility)) return false;
      if (!object.Equals(Extension, other.Extension)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (system_ != null) hash ^= System.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (statement_ != null) hash ^= Statement.GetHashCode();
      hash ^= profile_.GetHashCode();
      hash ^= Utility.GetHashCode();
      if (extension_ != null) hash ^= Extension.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (system_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(System);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (statement_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Statement);
      }
      profile_.WriteTo(output, _repeated_profile_codec);
      utility_.WriteTo(output, _map_utility_codec);
      if (extension_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(Extension);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (system_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(System);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (statement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Statement);
      }
      size += profile_.CalculateSize(_repeated_profile_codec);
      size += utility_.CalculateSize(_map_utility_codec);
      if (extension_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Problem other) {
      if (other == null) {
        return;
      }
      if (other.system_ != null) {
        if (system_ == null) {
          system_ = new global::Bacs.Problem.System();
        }
        System.MergeFrom(other.System);
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Bacs.Problem.Info();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.statement_ != null) {
        if (statement_ == null) {
          statement_ = new global::Bacs.Problem.Statement();
        }
        Statement.MergeFrom(other.Statement);
      }
      profile_.Add(other.profile_);
      utility_.Add(other.utility_);
      if (other.extension_ != null) {
        if (extension_ == null) {
          extension_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Extension.MergeFrom(other.Extension);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (system_ == null) {
              system_ = new global::Bacs.Problem.System();
            }
            input.ReadMessage(system_);
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Bacs.Problem.Info();
            }
            input.ReadMessage(info_);
            break;
          }
          case 26: {
            if (statement_ == null) {
              statement_ = new global::Bacs.Problem.Statement();
            }
            input.ReadMessage(statement_);
            break;
          }
          case 34: {
            profile_.AddEntriesFrom(input, _repeated_profile_codec);
            break;
          }
          case 42: {
            utility_.AddEntriesFrom(input, _map_utility_codec);
            break;
          }
          case 8002: {
            if (extension_ == null) {
              extension_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(extension_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class System : pb::IMessage<System> {
    private static readonly pb::MessageParser<System> _parser = new pb::MessageParser<System>(() => new System());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<System> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Problem.ProblemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public System() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public System(System other) : this() {
      problemType_ = other.problemType_;
      package_ = other.package_;
      Revision = other.revision_ != null ? other.Revision.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public System Clone() {
      return new System(this);
    }

    /// <summary>Field number for the "problem_type" field.</summary>
    public const int ProblemTypeFieldNumber = 1;
    private string problemType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProblemType {
      get { return problemType_; }
      set {
        problemType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 2;
    private string package_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Package {
      get { return package_; }
      set {
        package_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 3;
    private global::Bacs.Problem.Revision revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bacs.Problem.Revision Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as System);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(System other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProblemType != other.ProblemType) return false;
      if (Package != other.Package) return false;
      if (!object.Equals(Revision, other.Revision)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProblemType.Length != 0) hash ^= ProblemType.GetHashCode();
      if (Package.Length != 0) hash ^= Package.GetHashCode();
      if (revision_ != null) hash ^= Revision.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProblemType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProblemType);
      }
      if (Package.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Package);
      }
      if (revision_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Revision);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProblemType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProblemType);
      }
      if (Package.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Package);
      }
      if (revision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Revision);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(System other) {
      if (other == null) {
        return;
      }
      if (other.ProblemType.Length != 0) {
        ProblemType = other.ProblemType;
      }
      if (other.Package.Length != 0) {
        Package = other.Package;
      }
      if (other.revision_ != null) {
        if (revision_ == null) {
          revision_ = new global::Bacs.Problem.Revision();
        }
        Revision.MergeFrom(other.Revision);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProblemType = input.ReadString();
            break;
          }
          case 18: {
            Package = input.ReadString();
            break;
          }
          case 26: {
            if (revision_ == null) {
              revision_ = new global::Bacs.Problem.Revision();
            }
            input.ReadMessage(revision_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Revision : pb::IMessage<Revision> {
    private static readonly pb::MessageParser<Revision> _parser = new pb::MessageParser<Revision>(() => new Revision());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Revision> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Problem.ProblemReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Revision() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Revision(Revision other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Revision Clone() {
      return new Revision(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Revision);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Revision other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Revision other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Info : pb::IMessage<Info> {
    private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Problem.ProblemReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info(Info other) : this() {
      name_ = other.name_.Clone();
      author_ = other.author_.Clone();
      source_ = other.source_;
      maintainer_ = other.maintainer_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info Clone() {
      return new Info(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bacs.Problem.Info.Types.Name> _repeated_name_codec
        = pb::FieldCodec.ForMessage(10, global::Bacs.Problem.Info.Types.Name.Parser);
    private readonly pbc::RepeatedField<global::Bacs.Problem.Info.Types.Name> name_ = new pbc::RepeatedField<global::Bacs.Problem.Info.Types.Name>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bacs.Problem.Info.Types.Name> Name {
      get { return name_; }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_author_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> author_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Author {
      get { return author_; }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maintainer" field.</summary>
    public const int MaintainerFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_maintainer_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> maintainer_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Maintainer {
      get { return maintainer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!name_.Equals(other.name_)) return false;
      if(!author_.Equals(other.author_)) return false;
      if (Source != other.Source) return false;
      if(!maintainer_.Equals(other.maintainer_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= name_.GetHashCode();
      hash ^= author_.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      hash ^= maintainer_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      name_.WriteTo(output, _repeated_name_codec);
      author_.WriteTo(output, _repeated_author_codec);
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      maintainer_.WriteTo(output, _repeated_maintainer_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += name_.CalculateSize(_repeated_name_codec);
      size += author_.CalculateSize(_repeated_author_codec);
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      size += maintainer_.CalculateSize(_repeated_maintainer_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Info other) {
      if (other == null) {
        return;
      }
      name_.Add(other.name_);
      author_.Add(other.author_);
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      maintainer_.Add(other.maintainer_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            name_.AddEntriesFrom(input, _repeated_name_codec);
            break;
          }
          case 18: {
            author_.AddEntriesFrom(input, _repeated_author_codec);
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 34: {
            maintainer_.AddEntriesFrom(input, _repeated_maintainer_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Info message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Name : pb::IMessage<Name> {
        private static readonly pb::MessageParser<Name> _parser = new pb::MessageParser<Name>(() => new Name());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Name> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bacs.Problem.Info.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Name() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Name(Name other) : this() {
          language_ = other.language_;
          value_ = other.value_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Name Clone() {
          return new Name(this);
        }

        /// <summary>Field number for the "language" field.</summary>
        public const int LanguageFieldNumber = 1;
        private string language_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Language {
          get { return language_; }
          set {
            language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private string value_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Name);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Name other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Language != other.Language) return false;
          if (Value != other.Value) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Language.Length != 0) hash ^= Language.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Language.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Language);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Language.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Name other) {
          if (other == null) {
            return;
          }
          if (other.Language.Length != 0) {
            Language = other.Language;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Language = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Statement : pb::IMessage<Statement> {
    private static readonly pb::MessageParser<Statement> _parser = new pb::MessageParser<Statement>(() => new Statement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Statement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Problem.ProblemReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statement(Statement other) : this() {
      version_ = other.version_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statement Clone() {
      return new Statement(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bacs.Problem.Statement.Types.Version> _repeated_version_codec
        = pb::FieldCodec.ForMessage(10, global::Bacs.Problem.Statement.Types.Version.Parser);
    private readonly pbc::RepeatedField<global::Bacs.Problem.Statement.Types.Version> version_ = new pbc::RepeatedField<global::Bacs.Problem.Statement.Types.Version>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bacs.Problem.Statement.Types.Version> Version {
      get { return version_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Statement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Statement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!version_.Equals(other.version_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= version_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      version_.WriteTo(output, _repeated_version_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += version_.CalculateSize(_repeated_version_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Statement other) {
      if (other == null) {
        return;
      }
      version_.Add(other.version_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            version_.AddEntriesFrom(input, _repeated_version_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Statement message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Version : pb::IMessage<Version> {
        private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Version> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bacs.Problem.Statement.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version(Version other) : this() {
          language_ = other.language_;
          format_ = other.format_;
          package_ = other.package_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version Clone() {
          return new Version(this);
        }

        /// <summary>Field number for the "language" field.</summary>
        public const int LanguageFieldNumber = 1;
        private string language_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Language {
          get { return language_; }
          set {
            language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "format" field.</summary>
        public const int FormatFieldNumber = 2;
        private string format_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Format {
          get { return format_; }
          set {
            format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "package" field.</summary>
        public const int PackageFieldNumber = 3;
        private string package_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Package {
          get { return package_; }
          set {
            package_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Version);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Version other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Language != other.Language) return false;
          if (Format != other.Format) return false;
          if (Package != other.Package) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Language.Length != 0) hash ^= Language.GetHashCode();
          if (Format.Length != 0) hash ^= Format.GetHashCode();
          if (Package.Length != 0) hash ^= Package.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Language.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Language);
          }
          if (Format.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Format);
          }
          if (Package.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Package);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Language.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
          }
          if (Format.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
          }
          if (Package.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Package);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Version other) {
          if (other == null) {
            return;
          }
          if (other.Language.Length != 0) {
            Language = other.Language;
          }
          if (other.Format.Length != 0) {
            Format = other.Format;
          }
          if (other.Package.Length != 0) {
            Package = other.Package;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Language = input.ReadString();
                break;
              }
              case 18: {
                Format = input.ReadString();
                break;
              }
              case 26: {
                Package = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Version message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Manifest : pb::IMessage<Manifest> {
            private static readonly pb::MessageParser<Manifest> _parser = new pb::MessageParser<Manifest>(() => new Manifest());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Bacs.Problem.Statement.Types.Version.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifest(Manifest other) : this() {
              Version = other.version_ != null ? other.Version.Clone() : null;
              Revision = other.revision_ != null ? other.Revision.Clone() : null;
              Data = other.data_ != null ? other.Data.Clone() : null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifest Clone() {
              return new Manifest(this);
            }

            /// <summary>Field number for the "version" field.</summary>
            public const int VersionFieldNumber = 1;
            private global::Bacs.Problem.Statement.Types.Version version_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Bacs.Problem.Statement.Types.Version Version {
              get { return version_; }
              set {
                version_ = value;
              }
            }

            /// <summary>Field number for the "revision" field.</summary>
            public const int RevisionFieldNumber = 2;
            private global::Bacs.Problem.Revision revision_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Bacs.Problem.Revision Revision {
              get { return revision_; }
              set {
                revision_ = value;
              }
            }

            /// <summary>Field number for the "data" field.</summary>
            public const int DataFieldNumber = 3;
            private global::Bacs.Problem.Statement.Types.Version.Types.Manifest.Types.Data data_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Bacs.Problem.Statement.Types.Version.Types.Manifest.Types.Data Data {
              get { return data_; }
              set {
                data_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Version, other.Version)) return false;
              if (!object.Equals(Revision, other.Revision)) return false;
              if (!object.Equals(Data, other.Data)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (version_ != null) hash ^= Version.GetHashCode();
              if (revision_ != null) hash ^= Revision.GetHashCode();
              if (data_ != null) hash ^= Data.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (version_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Version);
              }
              if (revision_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Revision);
              }
              if (data_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Data);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (version_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
              }
              if (revision_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Revision);
              }
              if (data_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifest other) {
              if (other == null) {
                return;
              }
              if (other.version_ != null) {
                if (version_ == null) {
                  version_ = new global::Bacs.Problem.Statement.Types.Version();
                }
                Version.MergeFrom(other.Version);
              }
              if (other.revision_ != null) {
                if (revision_ == null) {
                  revision_ = new global::Bacs.Problem.Revision();
                }
                Revision.MergeFrom(other.Revision);
              }
              if (other.data_ != null) {
                if (data_ == null) {
                  data_ = new global::Bacs.Problem.Statement.Types.Version.Types.Manifest.Types.Data();
                }
                Data.MergeFrom(other.Data);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    if (version_ == null) {
                      version_ = new global::Bacs.Problem.Statement.Types.Version();
                    }
                    input.ReadMessage(version_);
                    break;
                  }
                  case 18: {
                    if (revision_ == null) {
                      revision_ = new global::Bacs.Problem.Revision();
                    }
                    input.ReadMessage(revision_);
                    break;
                  }
                  case 26: {
                    if (data_ == null) {
                      data_ = new global::Bacs.Problem.Statement.Types.Version.Types.Manifest.Types.Data();
                    }
                    input.ReadMessage(data_);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Manifest message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class Data : pb::IMessage<Data> {
                private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Data> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Bacs.Problem.Statement.Types.Version.Types.Manifest.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Data() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Data(Data other) : this() {
                  index_ = other.index_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Data Clone() {
                  return new Data(this);
                }

                /// <summary>Field number for the "index" field.</summary>
                public const int IndexFieldNumber = 1;
                private string index_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Index {
                  get { return index_; }
                  set {
                    index_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Data);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Data other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Index != other.Index) return false;
                  return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Index.Length != 0) hash ^= Index.GetHashCode();
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Index.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Index);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Index.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Index);
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Data other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Index.Length != 0) {
                    Index = other.Index;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 10: {
                        Index = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class Profile : pb::IMessage<Profile> {
    private static readonly pb::MessageParser<Profile> _parser = new pb::MessageParser<Profile>(() => new Profile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Profile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Problem.ProblemReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profile(Profile other) : this() {
      description_ = other.description_;
      Extension = other.extension_ != null ? other.Extension.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profile Clone() {
      return new Profile(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 1000;
    private global::Google.Protobuf.WellKnownTypes.Any extension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return extension_; }
      set {
        extension_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Profile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Profile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (!object.Equals(Extension, other.Extension)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (extension_ != null) hash ^= Extension.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (extension_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(Extension);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (extension_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Profile other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.extension_ != null) {
        if (extension_ == null) {
          extension_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Extension.MergeFrom(other.Extension);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 8002: {
            if (extension_ == null) {
              extension_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(extension_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Utility : pb::IMessage<Utility> {
    private static readonly pb::MessageParser<Utility> _parser = new pb::MessageParser<Utility>(() => new Utility());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Utility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bacs.Problem.ProblemReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Utility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Utility(Utility other) : this() {
      builderName_ = other.builderName_;
      nested_ = other.nested_.Clone();
      Extension = other.extension_ != null ? other.Extension.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Utility Clone() {
      return new Utility(this);
    }

    /// <summary>Field number for the "builder_name" field.</summary>
    public const int BuilderNameFieldNumber = 1;
    private string builderName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuilderName {
      get { return builderName_; }
      set {
        builderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nested" field.</summary>
    public const int NestedFieldNumber = 100;
    private static readonly pb::FieldCodec<global::Bacs.Problem.Utility> _repeated_nested_codec
        = pb::FieldCodec.ForMessage(802, global::Bacs.Problem.Utility.Parser);
    private readonly pbc::RepeatedField<global::Bacs.Problem.Utility> nested_ = new pbc::RepeatedField<global::Bacs.Problem.Utility>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bacs.Problem.Utility> Nested {
      get { return nested_; }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 1000;
    private global::Google.Protobuf.WellKnownTypes.Any extension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return extension_; }
      set {
        extension_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Utility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Utility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuilderName != other.BuilderName) return false;
      if(!nested_.Equals(other.nested_)) return false;
      if (!object.Equals(Extension, other.Extension)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuilderName.Length != 0) hash ^= BuilderName.GetHashCode();
      hash ^= nested_.GetHashCode();
      if (extension_ != null) hash ^= Extension.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuilderName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BuilderName);
      }
      nested_.WriteTo(output, _repeated_nested_codec);
      if (extension_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(Extension);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuilderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuilderName);
      }
      size += nested_.CalculateSize(_repeated_nested_codec);
      if (extension_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Utility other) {
      if (other == null) {
        return;
      }
      if (other.BuilderName.Length != 0) {
        BuilderName = other.BuilderName;
      }
      nested_.Add(other.nested_);
      if (other.extension_ != null) {
        if (extension_ == null) {
          extension_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Extension.MergeFrom(other.Extension);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BuilderName = input.ReadString();
            break;
          }
          case 802: {
            nested_.AddEntriesFrom(input, _repeated_nested_codec);
            break;
          }
          case 8002: {
            if (extension_ == null) {
              extension_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(extension_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
